/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.panels;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import jym.ferreteria.gui.internalframes.FrmRegistrarGastos;
import static jym.ferreteria.gui.internalframes.FrmRegistrarGastos.control;
import jym.ferreteria.renders.CustomTableModel;
import jym.ferreteria.renders.TablaResumenCellRenderer;
import jym.ferreteria.renders.TablaResumenGeneralCellRenderer;

/**
 *
 * @author Omr
 */
public class PanelResumenGastos extends javax.swing.JPanel {

    private CustomTableModel modelResumen = new CustomTableModel();
    private CustomTableModel modelResumenGeneral = new CustomTableModel();
//    private DefaultTreeTableModel treeTableModel = new DefaultTreeTableModel();
//    private Node root = new RootNode("Root");

    /**
     * Creates new form PanelResumenGastos
     */
    public PanelResumenGastos() {
        initComponents();

        modelResumen.setColumnIdentifiers(new String[]{"", "Conceptos", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", "Totales"});
        modelResumenGeneral.setColumnIdentifiers(new String[]{"", "Concepto", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", "Totales"});
        tablaResumenGastos.setModel(modelResumen);
        FrmRegistrarGastos.control.tableWidthColumn(tablaResumenGastos, 380, 1);
        FrmRegistrarGastos.control.hideTableColumn(tablaResumenGastos, 0);
//        jXTreeTable1.getColumnModel().getColumn(2).setPreferredWidth(500);
//        treeTableModel.setRoot(root);
//        treeTableModel.setColumnIdentifiers(Arrays.asList(new String[]{"Conceptos", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", "Totales"}));
//        jXTreeTable1.setTreeTableModel(treeTableModel);

        tablaResumenGastos.setDefaultRenderer(Object.class, new TablaResumenCellRenderer());

        tablaResumenGeneralGastos.setModel(modelResumenGeneral);
        FrmRegistrarGastos.control.tableWidthColumn(tablaResumenGeneralGastos, 350, 1);
        FrmRegistrarGastos.control.hideTableColumn(tablaResumenGeneralGastos, 0);
        tablaResumenGeneralGastos.setDefaultRenderer(Object.class, new TablaResumenGeneralCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResumenGastos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaResumenGeneralGastos = new javax.swing.JTable();

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaResumenGastos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaResumenGastos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaResumenGastos.setName("tablaResumenGastos"); // NOI18N
        tablaResumenGastos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaResumenGastos);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tablaResumenGeneralGastos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaResumenGeneralGastos.setName("tablaResumenGeneralGastos"); // NOI18N
        tablaResumenGeneralGastos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaResumenGeneralGastos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaResumenGastos;
    private javax.swing.JTable tablaResumenGeneralGastos;
    // End of variables declaration//GEN-END:variables

    public void load(int periodo, boolean agrupar) {
        cargarResumenGeneral(periodo);
        FrmRegistrarGastos.control.LimTabla(modelResumen);
        String filaConceptoMes[];
        String filaTotalClasificacionMes[];
        String filaTotalGeneral[] = llenarArray();
        double totalClasificacionAnual = 0;
        double totalConceptosAnual = 0;
        double totalGeneralAnual = 0;

        int filaUltimaClasificacion = 0;
        int contadorFila = 0;
        if (agrupar) {//Se muestra agrupado por clasificaci√≥n de gasto
            //ResultSet resultClasificacion = FrmRegistrarGastos.control.DevolverRegistro("SELECT * FROM `clasificaciongastos` ORDER BY `nombre`;");
            ResultSet resultClasificacion = control.DevolverRegistro(String.format("SELECT c.`idClasificacionGastos`,c.`nombre`,FORMAT(SUM(g.`importe`),2) AS importe,IF(c.`idClasificacionGastos`=1, 1, 0) AS orden "
                    + "FROM clasificaciongastos c, conceptogastos co, gastos g "
                    + "WHERE c.`idClasificacionGastos`=co.`idClasificacionGastos` "
                    + "AND co.`idConceptoGastos`=g.`idConceptoGastos` AND g.`anio`=%d "
                    + "GROUP BY c.`idClasificacionGastos` "
                    + "ORDER BY orden, c.`nombre`;", periodo));
            try {
                while (resultClasificacion.next()) {
                    totalClasificacionAnual = 0;
                    filaTotalClasificacionMes = llenarArray();
                    modelResumen.addRow(new String[]{"clasificacion", resultClasificacion.getString(2)});
                    contadorFila++;
//                ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `idConceptoGastos`, `nombre` FROM `conceptogastos` WHERE `idClasificacionGastos`=%s ORDER BY `nombre`;", resultClasificacion.getString(1)));
                    ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT c.`idConceptoGastos`, c.`nombre` FROM conceptogastos c, gastos g WHERE c.`idConceptoGastos`=g.`idConceptoGastos` AND c.`idClasificacionGastos`=%s ORDER BY c.`nombre`;", resultClasificacion.getString(1)));
                    while (resultConcepto.next()) {
                        totalConceptosAnual = 0;
                        ResultSet resultGastos = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `mes`, SUM(`importe`) AS importe FROM `gastos` WHERE `idConceptoGastos` =%s AND `anio` =%s GROUP BY `mes`;", resultConcepto.getString(1), periodo));
                        filaConceptoMes = llenarArray();
                        filaConceptoMes[0] = "concepto";
                        filaConceptoMes[1] = resultConcepto.getString(2);
                        while (resultGastos.next()) {

                            filaConceptoMes[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(resultGastos.getDouble(2));
                            filaTotalClasificacionMes[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(getValue(filaTotalClasificacionMes, resultGastos.getInt(1) + 2) + resultGastos.getDouble(2));
                            filaTotalGeneral[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(getValue(filaTotalGeneral, resultGastos.getInt(1) + 2) + resultGastos.getDouble(2));

                            totalConceptosAnual += resultGastos.getDouble(2);
                            totalClasificacionAnual += resultGastos.getDouble(2);
                            totalGeneralAnual += resultGastos.getDouble(2);

                        }
                        filaConceptoMes[14] = FrmRegistrarGastos.control.decimalFormat(totalConceptosAnual);
                        modelResumen.addRow(filaConceptoMes);
                        contadorFila++;

                    }
                    filaTotalClasificacionMes[0] = "clasificacion";
                    filaTotalClasificacionMes[1] = modelResumen.getValueAt(filaUltimaClasificacion, 1).toString();
                    filaTotalClasificacionMes[14] = FrmRegistrarGastos.control.decimalFormat(totalClasificacionAnual);

                    modelResumen.removeRow(filaUltimaClasificacion);
                    modelResumen.insertRow(filaUltimaClasificacion, filaTotalClasificacionMes);
                    filaUltimaClasificacion = contadorFila;
                }
                filaTotalGeneral[0] = "total";
                filaTotalGeneral[1] = "TOTAL:";
                filaTotalGeneral[14] = FrmRegistrarGastos.control.decimalFormat(totalGeneralAnual);
                modelResumen.addRow(filaTotalGeneral);
                filaTotalGeneral[0] = "egresos";
                filaTotalGeneral[1] = "Total de Egresos:";
                modelResumenGeneral.addRow(filaTotalGeneral);
                calcularTotalResumenGeneral();
            } catch (SQLException ex) {
                Logger.getLogger(PanelResumenGastos.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            try {
                //Se muestra solo los conceptos sin importar la clasificacion

                contadorFila++;
//                ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `idConceptoGastos`, `nombre` FROM `conceptogastos` WHERE `idClasificacionGastos`=%s ORDER BY `nombre`;", resultClasificacion.getString(1)));
                ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT c.`idConceptoGastos`, c.`nombre` FROM conceptogastos c, gastos g WHERE c.`idConceptoGastos`=g.`idConceptoGastos`  ORDER BY c.`nombre`;"));
                while (resultConcepto.next()) {
                    totalConceptosAnual = 0;
                    ResultSet resultGastos = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `mes`, SUM(`importe`) AS importe FROM `gastos` WHERE `idConceptoGastos` =%s AND `anio` =%s GROUP BY `mes`;", resultConcepto.getString(1), periodo));
                    filaConceptoMes = llenarArray();
                    filaConceptoMes[0] = "concepto";
                    filaConceptoMes[1] = resultConcepto.getString(2);
                    while (resultGastos.next()) {

                        filaConceptoMes[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(resultGastos.getDouble(2));
                        filaTotalGeneral[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(getValue(filaTotalGeneral, resultGastos.getInt(1) + 2) + resultGastos.getDouble(2));

                        totalConceptosAnual += resultGastos.getDouble(2);
                        totalClasificacionAnual += resultGastos.getDouble(2);
                        totalGeneralAnual += resultGastos.getDouble(2);

                    }
                    filaConceptoMes[14] = FrmRegistrarGastos.control.decimalFormat(totalConceptosAnual);
                    modelResumen.addRow(filaConceptoMes);
                    contadorFila++;

                }
                filaTotalGeneral[0] = "total";
                filaTotalGeneral[1] = "TOTAL:";
                filaTotalGeneral[14] = FrmRegistrarGastos.control.decimalFormat(totalGeneralAnual);
                modelResumen.addRow(filaTotalGeneral);
                filaTotalGeneral[0] = "egresos";
                filaTotalGeneral[1] = "Total de Egresos:";
                modelResumenGeneral.addRow(filaTotalGeneral);
                calcularTotalResumenGeneral();
            } catch (SQLException ex) {
                Logger.getLogger(PanelResumenGastos.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
//
    }

    /**
     * Obtiene el valor en la posici√≥n index del array
     *
     * @param array arreglo en el que se va a buscar
     * @param index indice a obtener
     * @return 0 si es nulo, el valor en la posicion determinada por index
     */
    private double getValue(String[] array, int index) {
        try {
            return Double.parseDouble(array[index].replace(",", ""));
        } catch (Exception e) {
        }
        return 0;
    }

    private void cargarResumenGeneral(int periodo) {
        double total = 0;
        FrmRegistrarGastos.control.LimTabla(modelResumenGeneral);
        ResultSet result = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT  `mes` ,`totalIngresos` FROM `periodoanalisisgastos` WHERE `anio`=%d ORDER BY `mes`;", periodo));
        String[] row = llenarArray();
        row[0] = "ingresos";
        row[1] = "Total de Ingresos";
        try {
            while (result.next()) {
                row[result.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(result.getDouble(2));
                total += result.getDouble(2);

            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelResumenGastos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        row[14] = FrmRegistrarGastos.control.decimalFormat(total);
        modelResumenGeneral.addRow(row);
    }

    private void calcularTotalResumenGeneral() {
        String row[] = llenarArray();
        row[0] = "total";
        row[1] = "Neto";
        for (int i = 2; i < 15; i++) {
            double in = 0;
            double eg = 0;
            try {

                in = Double.parseDouble(modelResumenGeneral.getValueAt(0, i).toString().replace(",", ""));
            } catch (Exception e) {
            }
            try {
                eg = Double.parseDouble(modelResumenGeneral.getValueAt(1, i).toString().replace(",", ""));
            } catch (Exception e) {
            }

            row[i] = FrmRegistrarGastos.control.decimalFormat(in - eg);
        }
        modelResumenGeneral.addRow(row);
    }

    private String[] llenarArray() {
        String a[] = new String[15];
        for (int i = 0; i < a.length; i++) {
            a[i] = "0.00";
        }
        return a;

    }

}
