/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.dialogs;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jym.ferreteria.clases.Controlador;
import jym.ferreteria.renders.CustomTableModel;
import jym.ferreteria.renders.LabelRenderer;

/**
 *
 * @author Omr
 */
public class SeleccionarProductoDialog extends javax.swing.JDialog {

        private CustomTableModel productosModel = new CustomTableModel();
        private CustomTableModel productosAlmacenModel = new CustomTableModel();
        private Controlador control = new Controlador();
        private String[] datos;
        private int selectedRow;
        private List<double[]> lista = new ArrayList();
        private DecimalFormat format = new DecimalFormat("00.00");

        /**
         * Creates new form SeleccionarProducto
         */
        public SeleccionarProductoDialog(java.awt.Frame parent, boolean modal) {
                super(parent, modal);
                initComponents();
                setIconImage(new ImageIcon(getClass().getResource(Controlador.ICON_PATH)).getImage());
                tablaProductos.setComponentPopupMenu(jPopupMenu1);
                productosModel.setColumnIdentifiers(new String[]{"Id", "Descripción producto", "Unidad", "Pv. x menor", "Pv. x mayor", "P. Compra"});
                productosAlmacenModel.setColumnIdentifiers(new String[]{"Id", "Almacén", "Cantidad"});
                tablaProductos.setModel(productosModel);
                tablaProductoAlmacen.setModel(productosAlmacenModel);

                control.hideTableColumn(tablaProductos, 0);
                control.tableWidthColumn(tablaProductos, 500, 1);
                control.hideTableColumn(tablaProductoAlmacen, 0);
                control.tableWidthColumn(tablaProductoAlmacen, 500, 1);
                control.tableWidthColumn(tablaProductos, 80, 3, 4, 5);

                LabelRenderer labelRenderer = new LabelRenderer(SwingConstants.RIGHT);
                tablaProductos.getColumnModel().getColumn(3).setCellRenderer(labelRenderer);
                tablaProductos.getColumnModel().getColumn(4).setCellRenderer(labelRenderer);
                tablaProductos.getColumnModel().getColumn(5).setCellRenderer(labelRenderer);
                tablaProductoAlmacen.getColumnModel().getColumn(2).setCellRenderer(labelRenderer);
                tablaProductoAlmacen.getColumnModel().getColumn(2).setCellRenderer(labelRenderer);
                tablaProductos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

                        @Override
                        public void valueChanged(ListSelectionEvent e) {
                                if (productosModel.getRowCount() > 0 && tablaProductos.getSelectedRow() >= 0) {
                                        control.LlenarJTabla(productosAlmacenModel, String.format("SELECT a.`idAlmacen`, a.`nombre`, s.`cantidadDisponible` FROM stock s, almacen a WHERE s.`idAlmacen`=a.`idAlmacen` AND s.`idProducto`=%s;", productosModel.getValueAt(tablaProductos.getSelectedRow(), 0).toString()), 3);
                                        calcularStock(productosModel.getValueAt(tablaProductos.getSelectedRow(), 0).toString());
                                        try {
                                                tablaProductoAlmacen.getSelectionModel().addSelectionInterval(0, 0);
                                        } catch (Exception ex) {
                                        }
                                } else {
                                        control.LimTabla(productosAlmacenModel);
                                }
                                btnSeleccionar.setEnabled(true);
                        }
                });
                cargarProductos();

        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPopupMenu1 = new javax.swing.JPopupMenu();
                lblBuscar = new javax.swing.JLabel();
                jTextField1 = new javax.swing.JTextField();
                jScrollPane1 = new javax.swing.JScrollPane();
                tablaProductos = new javax.swing.JTable();
                jScrollPane2 = new javax.swing.JScrollPane();
                tablaProductoAlmacen = new javax.swing.JTable();
                btnSeleccionar = new javax.swing.JButton();
                jButton1 = new javax.swing.JButton();

                jPopupMenu1.setName("jPopupMenu1"); // NOI18N

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("Seleccionar productos");

                lblBuscar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
                lblBuscar.setText("Buscar");
                lblBuscar.setName("lblBuscar"); // NOI18N

                jTextField1.setName("jTextField1"); // NOI18N
                jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                jTextField1KeyPressed(evt);
                        }
                        public void keyReleased(java.awt.event.KeyEvent evt) {
                                jTextField1KeyReleased(evt);
                        }
                });

                jScrollPane1.setName("jScrollPane1"); // NOI18N

                tablaProductos.setAutoCreateRowSorter(true);
                tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tablaProductos.setName("tablaProductos"); // NOI18N
                tablaProductos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                tablaProductos.getTableHeader().setReorderingAllowed(false);
                tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                tablaProductosMouseClicked(evt);
                        }
                        public void mousePressed(java.awt.event.MouseEvent evt) {
                                tablaProductosMousePressed(evt);
                        }
                });
                tablaProductos.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                tablaProductosKeyPressed(evt);
                        }
                });
                jScrollPane1.setViewportView(tablaProductos);

                jScrollPane2.setName("jScrollPane2"); // NOI18N

                tablaProductoAlmacen.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tablaProductoAlmacen.setName("tablaProductoAlmacen"); // NOI18N
                tablaProductoAlmacen.getTableHeader().setReorderingAllowed(false);
                tablaProductoAlmacen.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                tablaProductoAlmacenMouseClicked(evt);
                        }
                });
                tablaProductoAlmacen.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                tablaProductoAlmacenKeyPressed(evt);
                        }
                });
                jScrollPane2.setViewportView(tablaProductoAlmacen);

                btnSeleccionar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
                btnSeleccionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/registrar.png"))); // NOI18N
                btnSeleccionar.setMnemonic('S');
                btnSeleccionar.setText("Seleccionar");
                btnSeleccionar.setName("btnSeleccionar"); // NOI18N
                btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSeleccionarActionPerformed(evt);
                        }
                });

                jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
                jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/salir.png"))); // NOI18N
                jButton1.setMnemonic('C');
                jButton1.setText("Cerrar");
                jButton1.setName("jButton1"); // NOI18N
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblBuscar)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(btnSeleccionar))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMouseClicked
                if (evt.getClickCount() > 1) {
                        seleccionarProducto();
                }
    }//GEN-LAST:event_tablaProductosMouseClicked

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
                cargarProductos();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void tablaProductosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaProductosKeyPressed
                if (evt.getKeyCode() == KeyEvent.VK_ENTER && tablaProductos.getSelectedRow() >= 0) {

                        if (tablaProductoAlmacen.getRowCount() == 0) {
                                seleccionarProducto();
                        } else {

                                try {
                                        tablaProductoAlmacen.getSelectionModel().addSelectionInterval(0, 0);
//                    tablaProductoAlmacen.changeSelection(0, 1, false, false);
                                } catch (Exception ex) {

                                }
                                tablaProductoAlmacen.requestFocus();
                                evt.consume();
                        }

                }
    }//GEN-LAST:event_tablaProductosKeyPressed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
                if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_DOWN) {
                        if (productosModel.getRowCount() > 0) {
                                try {
                                        tablaProductos.getSelectionModel().setSelectionInterval(0, 0);
                                        tablaProductos.requestFocus();
                                } catch (Exception e) {
                                }
                        }
                }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void tablaProductoAlmacenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaProductoAlmacenKeyPressed
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                        seleccionarProducto();

                }
    }//GEN-LAST:event_tablaProductoAlmacenKeyPressed

    private void tablaProductoAlmacenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductoAlmacenMouseClicked
                if (tablaProductos.getSelectedRow() >= 0) {
                        if (tablaProductoAlmacen.getSelectedRow() >= 0 && evt.getClickCount() > 1) {
                                seleccionarProducto();
                        }
                }

    }//GEN-LAST:event_tablaProductoAlmacenMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                datos = null;
                dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
                seleccionarProducto();

    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void tablaProductosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMousePressed
                cargarPopup(evt);
    }//GEN-LAST:event_tablaProductosMousePressed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
                 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbuds".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(SeleccionarProductoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(SeleccionarProductoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(SeleccionarProductoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(SeleccionarProductoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
        //</editor-fold>

                /* Create and display the dialog */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                SeleccionarProductoDialog dialog = new SeleccionarProductoDialog(new javax.swing.JFrame(), true);
                                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                                        @Override
                                        public void windowClosing(java.awt.event.WindowEvent e) {
                                                System.exit(0);
                                        }
                                });
                                dialog.setVisible(true);
                        }
                });
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnSeleccionar;
        private javax.swing.JButton jButton1;
        private javax.swing.JPopupMenu jPopupMenu1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JTextField jTextField1;
        private javax.swing.JLabel lblBuscar;
        private javax.swing.JTable tablaProductoAlmacen;
        private javax.swing.JTable tablaProductos;
        // End of variables declaration//GEN-END:variables

        private void cargarProductos() {
                String text = jTextField1.getText();
                control.Sql = "select  `ID`, concat(`Producto`,' ',`Descripcion`), `Unidad`,`Precxmenor`, `Precxmayor`, `precioCompra`  from Vta_Catalogo where `ID` IN(SELECT s.`idProducto` FROM stock s) AND (`Codigo` like '%" + text
                        + "%' or Producto like'%" + text + "%' or Descripcion like '%" + text
                        + "%' or Marca like'%" + text + "%') order by Producto";
                control.LlenarJTabla(productosModel, control.Sql, 6);
                control.LimTabla(productosAlmacenModel);
                btnSeleccionar.setEnabled(false);
                selectedRow = -1;
        }

        private void seleccionarProducto() {
                int row = tablaProductos.getSelectedRow();
                datos = new String[9];
                datos[0] = productosModel.getValueAt(row, 0).toString();//id
                datos[1] = productosModel.getValueAt(row, 1).toString();//nombre
                datos[2] = productosModel.getValueAt(row, 2).toString();//unidad
                datos[3] = productosAlmacenModel.getRowCount() > 0 ? productosAlmacenModel.getValueAt(tablaProductoAlmacen.getSelectedRow(), 0).toString() : null;//id almacen
                datos[4] = productosAlmacenModel.getRowCount() > 0 ? productosAlmacenModel.getValueAt(tablaProductoAlmacen.getSelectedRow(), 1).toString() : null;//almacen
                datos[5] = productosModel.getValueAt(row, 3).toString();//precio por menor
                datos[6] = productosModel.getValueAt(row, 4).toString();//precio por mayor
                datos[7] = productosModel.getValueAt(row, 5).toString();//precio de compra
                datos[8] = productosAlmacenModel.getRowCount() > 0 ? productosAlmacenModel.getValueAt(tablaProductoAlmacen.getSelectedRow(), 2).toString() : "0";//stock disponible

                this.dispose();
        }

        /**
         *
         * @return [id, nombre, unidad, idalmacen, nombre almacen,precio por
         * menor, precio por mayor, precio compra, stock disponible]
         */
        public String[] getDatos() {
                return datos;
        }

        @Override
        public void setVisible(boolean b) {
                datos = null;
                cargarProductos();
                super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        }

        public void setLista(List<double[]> lista) {
                this.lista = lista;
                cargarProductos();
        }

        private void calcularStock(String producto) {
                for (int i = 0; i < productosAlmacenModel.getRowCount(); i++) {
                        for (double[] tmp : lista) {
                                if ((int) tmp[0] == Integer.parseInt(producto) && Integer.parseInt(productosAlmacenModel.getValueAt(i, 0).toString()) == (int) tmp[1]) {
                                        productosAlmacenModel.setValueAt(format.format(Double.parseDouble(productosAlmacenModel.getValueAt(i, 2).toString()) - tmp[2]).replace(",", "."), i, 2);
                                }
                        }

                }

        }

        private void cargarPopup(MouseEvent evt) {
                try {
                        Point point = evt.getPoint();
                        int currentRow = tablaProductos.rowAtPoint(point);
                        tablaProductos.setRowSelectionInterval(currentRow, currentRow);
                        jPopupMenu1.removeAll();
                        String[] datos = control.cargarRegistro(String.format("SELECT p.`idProduto`,p.`Idproductocont`, concat(v.`Producto`,' ',v.`Descripcion`), p.`CantCont` ,v.`Unidad` as und FROM produto p, vta_catalogo v WHERE v.`ID`=p.`Idproductocont` AND p.`idProduto`=%s;",
                                productosModel.getValueAt(currentRow, 0).toString()), 5);
                        if (datos != null) {
                                JMenuItem item = new JMenuItem();
                                item.setName("item-" + datos[0] + "-" + datos[1] + "-" + datos[3]);
                                item.setText("Covertir en " + datos[2] + " (" + datos[3] + " " + datos[4] + ")");
                                item.addActionListener(new ActionListener() {

                                        @Override
                                        public void actionPerformed(ActionEvent e) {
                                                JMenuItem jmi = (JMenuItem) e.getSource();
                                                String[] split = jmi.getName().split("-");
                                                int filaAlmacen = tablaProductoAlmacen.getSelectedRow();
                                                if (filaAlmacen >= 0) {
                                                        double cant = Double.parseDouble(productosAlmacenModel.getValueAt(filaAlmacen, 2).toString());
                                                        if (cant > 0) {
                                                                control.ejecutar(String.format("INSERT IGNORE INTO stock VALUES(%s,%s,0);", productosAlmacenModel.getValueAt(filaAlmacen, 0).toString(), split[2]));
                                                                control.ejecutar(String.format("UPDATE stock s SET s.`cantidadDisponible`=s.`cantidadDisponible`+%s WHERE s.`idAlmacen`=%s AND s.`idProducto`=%s;", split[3], productosAlmacenModel.getValueAt(filaAlmacen, 0).toString(), split[2]));
                                                                control.ejecutar(String.format("UPDATE stock s SET s.`cantidadDisponible`=s.`cantidadDisponible`-1 WHERE s.`idAlmacen`=%s AND s.`idProducto`=%s;", productosAlmacenModel.getValueAt(filaAlmacen, 0).toString(), split[1]));
                                                                int filaProductos = tablaProductos.getSelectedRow();
                                                                cargarProductos();
                                                                tablaProductos.setRowSelectionInterval(filaProductos, filaProductos);
                                                        } else {
                                                                JOptionPane.showMessageDialog(SeleccionarProductoDialog.this, "Este producto no se puede abrir ya que no tiene existencias en stock");
                                                        }
                                                }

                                        }
                                });
                                jPopupMenu1.add(item);
                        }

                } catch (Exception e) {
                        e.printStackTrace();
                }

        }
}
