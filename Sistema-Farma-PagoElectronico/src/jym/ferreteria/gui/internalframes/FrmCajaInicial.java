/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.internalframes;

import jym.ferreteria.clases.Controlador;
import jym.ferreteria.clases.InfoGeneral;
import java.awt.event.KeyEvent;

/**
 *
 * @author Omr
 */
public class FrmCajaInicial extends javax.swing.JDialog {

    private Controlador controlador = new Controlador();
    private double monto = 0.00;
    private int modo = 0;
    private final String fecha;

    /**
     * Creates new form FrmCajaInicial
     */
    public FrmCajaInicial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        txtImporteCaja.requestFocus();
        this.fecha = getFecha();
        calcularMonto();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConfirmar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtImporteCaja = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Caja Incial");
        setType(java.awt.Window.Type.UTILITY);

        btnConfirmar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Accept.png"))); // NOI18N
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Caja inicial:");

        txtImporteCaja.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtImporteCaja.setText("0.00");
        txtImporteCaja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtImporteCajaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtImporteCajaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtImporteCaja)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtImporteCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 80, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void txtImporteCajaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImporteCajaKeyTyped
            controlador.decimal(evt, txtImporteCaja.getText());
        }//GEN-LAST:event_txtImporteCajaKeyTyped

        private void txtImporteCajaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImporteCajaKeyPressed
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                btnConfirmar.doClick();
            }
        }//GEN-LAST:event_txtImporteCajaKeyPressed

        private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
            guardar();
        }//GEN-LAST:event_btnConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCajaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCajaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCajaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCajaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
                //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmCajaInicial dialog = new FrmCajaInicial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtImporteCaja;
    // End of variables declaration//GEN-END:variables

    private void calcularMonto() {
        monto = getCajaDiaria() + getIngresosEnVentas() + getOtrosIngresos() - (getPagoProvedores() + getOtrosGastos());
       String valor=controlador.decimalFormat(monto);
        
        txtImporteCaja.setText(String.valueOf(valor));
        txtImporteCaja.requestFocus();
    }

    private String getFecha() {
        String fec = controlador.DevolverRegistroDto(String.format("SELECT `fecha` FROM `cajainicial` WHERE `idSede`=%s AND `fecha`<>CURDATE() ORDER BY `fecha` DESC LIMIT 1;", InfoGeneral.getIdSede()), 1);
        if (fec.equals("")) {
            fec = controlador.DevolverRegistroDto("SELECT CURDATE()", 1);
        }
        return fec;
    }

    private double getCajaDiaria() {
        String caja = controlador.DevolverRegistroDto(String.format("SELECT `monto` FROM `cajainicial` WHERE `fecha`='%s' AND `idSede`=%s;", fecha, InfoGeneral.getIdSede()), 1);
        if (caja == null) {
            return 0.00;
        }
        return controlador.toDouble(caja);
    }

    private double getIngresosEnVentas() {
        String ventas = controlador.DevolverRegistroDto(String.format("SELECT IFNULL(SUM(d.`precioVenta`),0.00) FROM venta v, tipocomprobante t, detalleventa d, comprobante c WHERE t.`idTipoComprobante`=c.`idTipoComprobante` AND c.`idComprobante`=v.`idComprobante` AND v.`idVenta`=d.`idVenta` AND t.`idSede`='%s' AND v.`fecha`='%s';", InfoGeneral.getIdSede(), fecha), 1);
        return Double.parseDouble(ventas);
    }

    private double getOtrosIngresos() {
        String ingresos = controlador.DevolverRegistroDto(String.format("SELECT IFNULL(sum(i.monto),0.00) FROM ingresocaja i where i.fecha='%s' AND i.idSede=%s", fecha, InfoGeneral.getIdSede()), 1);
        return Double.parseDouble(ingresos);
    }

    private double getPagoProvedores() {
        String pagoProveedor = controlador.DevolverRegistroDto(String.format("SELECT IFNULL(SUM(p.`montoReal`),0.00) FROM pagoproveedor p, facturaproveedor f, tipocomprobante t\n"
                + "WHERE t.`idTipoComprobante`=f.`idTipoComprobante` AND p.`fechapago`='%s' AND f.`idFacturaProveedor`=p.`idFacturaProveedor` AND t.`idSede`='%s';", fecha, InfoGeneral.getIdSede()), 1);
        return Double.parseDouble(pagoProveedor);
    }

    private double getOtrosGastos() {
        String gastos = controlador.DevolverRegistroDto(String.format("SELECT IFNULL(SUM(`importe`),0.00) FROM `gastos` WHERE `fecha`='%s' AND idSede=%s", fecha, InfoGeneral.getIdSede()), 1);
        return Double.parseDouble(gastos);
    }

    public void setModo(int modo) {
        this.modo = modo;
    }

    private void guardar() {
        monto = controlador.toDouble(txtImporteCaja.getText());
        if (modo == 0) {//Registrar caja Inicial
            this.dispose();
        } else {//Actualizar caja Inicial
            controlador.ejecutar(String.format("UPDATE cajainicial c SET c.`monto`=%s WHERE c.`fecha`=CURDATE() AND c.`idSede`=%s;", monto, InfoGeneral.getIdSede()));
            System.out.println(String.format("UPDATE cajainicial c SET c.`monto`=%s WHERE c.`fecha`=CURDATE() AND c.`idSede`=%s;", monto, InfoGeneral.getIdSede()));
            this.dispose();
        }
    }

    @Override
    public void dispose() {
        if (modo == 0) {//Registrar caja Inicial
            controlador.ejecutar(String.format("INSERT INTO cajainicial VALUES(CURDATE(),%s,%s);", monto, InfoGeneral.getIdSede()));
            System.out.println(String.format("INSERT INTO cajainicial VALUES(CURDATE(),%s,%s);", monto, InfoGeneral.getIdSede()));
        }
        super.dispose();
    }

    public void setValue(String val) {
        txtImporteCaja.setText(val);
    }
}
