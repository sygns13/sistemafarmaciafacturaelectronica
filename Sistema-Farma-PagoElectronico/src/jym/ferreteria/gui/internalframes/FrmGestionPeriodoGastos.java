/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.internalframes;

import javax.swing.ImageIcon;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import jym.ferreteria.clases.Controlador;
import jym.ferreteria.gui.FrmMain;
import jym.ferreteria.renders.CustomTableModel;

/**
 *
 * @author Omr
 */
public class FrmGestionPeriodoGastos extends javax.swing.JInternalFrame {

    private static final Controlador control = new Controlador();
    private static int anio;
    private static final CustomTableModel modelo1 = new CustomTableModel();
    private static final CustomTableModel modelo2 = new CustomTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 2 || column == 3;
        }

        @Override
        public void setValueAt(Object aValue, int row, int column) {

            try {
                double value = Double.parseDouble(aValue.toString().replace(",", ""));
                super.setValueAt(control.decimalFormat(value), row, column);

            } catch (Exception e) {
                super.setValueAt("0.00", row, column);
            }
        }
    };

    /**
     * Creates new form RegistrarClasificacionConceptoGastos
     */
    public FrmGestionPeriodoGastos() {
        initComponents();
        this.setFrameIcon(new ImageIcon(this.getClass().getResource(Controlador.ICON_PATH)));
        tablaAnio.setModel(modelo1);
        modelo1.setColumnIdentifiers(new String[]{"Año"});
        tablaDetalles.setModel(modelo2);
        modelo2.setColumnIdentifiers(new String[]{"Id", "Mes", "Total Ingresos ventas", "Otros Egresos", "Total Egresos Gastos", "Neto"});
//        modelo2.setColumnIdentifiers(new String[]{"Mes", "Total Egresos" });
        control.hideTableColumn(tablaDetalles, 0);
        control.tableMaxWidthColumn(tablaDetalles, 100, 1);
        mostrarAnio();
//        mostrarTotalesResumen();

        tablaAnio.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                btnRegistrarGastos.setEnabled(true);
                bEliminar.setEnabled(true);
                bEditar.setEnabled(true);
                btnRegistrarGastos.setEnabled(true);
            }
        });
        tablaDetalles.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                btnRecalcularIngresos.setEnabled(true);
            }
        });
        modelo2.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE && (e.getColumn() == 2 || e.getColumn() == 3)) {
                    int mes = Integer.parseInt(modelo2.getValueAt(e.getFirstRow(), 0).toString()) - 1;
                    double ingresos = Double.parseDouble(modelo2.getValueAt(e.getFirstRow(), 2).toString().replace(",", ""));
                    double otrosEgresos = Double.parseDouble(modelo2.getValueAt(e.getFirstRow(), 3).toString().replace(",", ""));
                    double egresosGastos = Double.parseDouble(modelo2.getValueAt(e.getFirstRow(), 4).toString().replace(",", ""));
                    double neto = ingresos - (otrosEgresos + egresosGastos);
                    control.ejecutar(String.format("UPDATE periodoanalisisgastos p SET p.`totalIngresos`=%s, p.`totalOtrosEgresos`=%s, p.`neto`= %s WHERE p.`anio`=%d AND p.`mes`=%d;", ingresos, otrosEgresos, neto, anio, mes));
                    modelo2.setValueAt(control.decimalFormat(neto), e.getFirstRow(), 5);
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bCrear = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        bCancelar = new javax.swing.JButton();
        bSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAnio = new javax.swing.JTable();
        txtAnio = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaDetalles = new javax.swing.JTable();
        bEditar = new javax.swing.JButton();
        btnRegistrarGastos = new javax.swing.JButton();
        btnRecalcularIngresos = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setClosable(true);
        setIconifiable(true);
        setTitle("Administración de periodos de gastos");

        bCrear.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Files-New-File-icon.png"))); // NOI18N
        bCrear.setMnemonic('N');
        bCrear.setText("Nuevo");
        bCrear.setName("bCrear"); // NOI18N
        bCrear.addActionListener(formListener);

        bEliminar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/trash.png"))); // NOI18N
        bEliminar.setMnemonic('l');
        bEliminar.setText("Eliminar");
        bEliminar.setName("bEliminar"); // NOI18N
        bEliminar.addActionListener(formListener);

        bCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/cancel.png"))); // NOI18N
        bCancelar.setMnemonic('C');
        bCancelar.setText("Cancelar");
        bCancelar.setName("bCancelar"); // NOI18N
        bCancelar.addActionListener(formListener);

        bSalir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/salir.png"))); // NOI18N
        bSalir.setMnemonic('S');
        bSalir.setText("Salir");
        bSalir.setName("bSalir"); // NOI18N
        bSalir.addActionListener(formListener);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaAnio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Año"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaAnio.setName("tablaAnio"); // NOI18N
        tablaAnio.getTableHeader().setReorderingAllowed(false);
        tablaAnio.addMouseListener(formListener);
        jScrollPane1.setViewportView(tablaAnio);

        txtAnio.setEditable(false);
        txtAnio.setName("txtAnio"); // NOI18N
        txtAnio.addKeyListener(formListener);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Año:");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tablaDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mes", "Saldo inicial", "Total ingresos", "Total egresos", "Neto"
            }
        ));
        tablaDetalles.setName("tablaDetalles"); // NOI18N
        tablaDetalles.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaDetalles);

        bEditar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Actions-document-edit-icon.png"))); // NOI18N
        bEditar.setMnemonic('E');
        bEditar.setText("Editar");
        bEditar.setToolTipText("");
        bEditar.setName("bEditar"); // NOI18N
        bEditar.addActionListener(formListener);

        btnRegistrarGastos.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnRegistrarGastos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Payment.png"))); // NOI18N
        btnRegistrarGastos.setText("Registrar gastos");
        btnRegistrarGastos.setName("btnRegistrarGastos"); // NOI18N
        btnRegistrarGastos.addActionListener(formListener);

        btnRecalcularIngresos.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnRecalcularIngresos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Refresh-icon.png"))); // NOI18N
        btnRecalcularIngresos.setText("Recalcular Ingresos");
        btnRecalcularIngresos.setName("btnRecalcularIngresos"); // NOI18N
        btnRecalcularIngresos.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAnio))
                    .addComponent(btnRegistrarGastos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(bCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnRecalcularIngresos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bCrear)
                                    .addComponent(bCancelar)
                                    .addComponent(bSalir)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bEditar)
                                    .addComponent(bEliminar))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRegistrarGastos)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnRecalcularIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == bCrear) {
                FrmGestionPeriodoGastos.this.bCrearActionPerformed(evt);
            }
            else if (evt.getSource() == bEliminar) {
                FrmGestionPeriodoGastos.this.bEliminarActionPerformed(evt);
            }
            else if (evt.getSource() == bCancelar) {
                FrmGestionPeriodoGastos.this.bCancelarActionPerformed(evt);
            }
            else if (evt.getSource() == bSalir) {
                FrmGestionPeriodoGastos.this.bSalirActionPerformed(evt);
            }
            else if (evt.getSource() == bEditar) {
                FrmGestionPeriodoGastos.this.bEditarActionPerformed(evt);
            }
            else if (evt.getSource() == btnRegistrarGastos) {
                FrmGestionPeriodoGastos.this.btnRegistrarGastosActionPerformed(evt);
            }
            else if (evt.getSource() == btnRecalcularIngresos) {
                FrmGestionPeriodoGastos.this.btnRecalcularIngresosActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == txtAnio) {
                FrmGestionPeriodoGastos.this.txtAnioKeyPressed(evt);
            }
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == txtAnio) {
                FrmGestionPeriodoGastos.this.txtAnioKeyTyped(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == tablaAnio) {
                FrmGestionPeriodoGastos.this.tablaAnioMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void bCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCrearActionPerformed
        NuevoAnio();        // TODO add your handling code here:
    }//GEN-LAST:event_bCrearActionPerformed

    private void txtAnioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioKeyPressed
        if (control.isEnterKey(evt)) {
            if (bCrear.isEnabled()) {
                bCrear.doClick();
            } else {
                bEditar.doClick();
            }
        }

    }//GEN-LAST:event_txtAnioKeyPressed

    private void tablaAnioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAnioMouseClicked
        mostrarTotalesResumen();
    }//GEN-LAST:event_tablaAnioMouseClicked

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        eliminarAnio();        // TODO add your handling code here:
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        txtAnio.setEditable(false);
        txtAnio.setText("");
        bCrear.setEnabled(true);
        mostrarAnio();
        bCrear.setText("Nuevo");
        tablaAnio.setEnabled(true); 
    }//GEN-LAST:event_bCancelarActionPerformed

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_bSalirActionPerformed

    private void txtAnioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioKeyTyped
        control.Solonumeros(evt);
        control.Longitudtx(txtAnio, evt, 4);
    }//GEN-LAST:event_txtAnioKeyTyped

    private void bEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditarActionPerformed
        editarAnio();
    }//GEN-LAST:event_bEditarActionPerformed

    private void btnRegistrarGastosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarGastosActionPerformed
        registrarGastos();
    }//GEN-LAST:event_btnRegistrarGastosActionPerformed

    private void btnRecalcularIngresosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecalcularIngresosActionPerformed
        calcularIngresos();
    }//GEN-LAST:event_btnRecalcularIngresosActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancelar;
    private javax.swing.JButton bCrear;
    private javax.swing.JButton bEditar;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bSalir;
    private static javax.swing.JButton btnRecalcularIngresos;
    private javax.swing.JButton btnRegistrarGastos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTable tablaAnio;
    private static javax.swing.JTable tablaDetalles;
    private javax.swing.JTextField txtAnio;
    // End of variables declaration//GEN-END:variables

    private void mostrarAnio() {
        control.Sql = "SELECT p.anio FROM periodoanalisisgastos p group  by anio;";
        control.LlenarJTabla(modelo1, control.Sql, 1);
        btnRegistrarGastos.setEnabled(false);
        bEliminar.setEnabled(false);
        bEditar.setEnabled(false);
        btnRegistrarGastos.setEnabled(false);
    }

    public static void mostrarTotalesResumen() {
        control.LimTabla(modelo2);
        anio = Integer.parseInt(modelo1.getValueAt(tablaAnio.getSelectedRow(), 0).toString());
        if (tablaAnio.getSelectedRowCount() == 1) {
            control.Sql = "SELECT (p.mes+1), getMonth(p.mes+1), FORMAT(p.totalIngresos,2), FORMAT(p.totalOtrosEgresos,2) ,FORMAT(p.totalEgresos,2), FORMAT(p.neto,2) FROM periodoanalisisgastos p where anio='" + modelo1.getValueAt(tablaAnio.getSelectedRow(), 0).toString() + "';";
            System.out.println(control.Sql);
            control.LlenarJTabla(modelo2, control.Sql, 6);
            btnRecalcularIngresos.setEnabled(false);
        }
    }

    private void NuevoAnio() {
        if (bCrear.getText().compareTo("Nuevo") == 0) {
            txtAnio.grabFocus();
            txtAnio.setEditable(true);
            bEliminar.setEnabled(false);
            bEditar.setEnabled(false);
            bCrear.setText("Grabar");
            bCrear.setMnemonic('G');
            txtAnio.requestFocus();
            tablaAnio.setEnabled(false);
        } else {
            if (txtAnio.getText().trim().length() == 4) {
                if (control.Verificarconsulta("select * from periodoanalisisgastos where anio='" + txtAnio.getText() + "';") == false) {
                    for (int n = 0; n < 12; n++) {
                        control.Sql = "insert into periodoanalisisgastos(anio, mes,totalOtrosegresos, totalIngresos, totalEgresos, neto) values"
                                + "('" + txtAnio.getText() + "','" + n + "','0','0','0','0');";
                        control.CrearRegistro(control.Sql);
                    }
                    txtAnio.setText("");
                    txtAnio.setEditable(false);
                    tablaAnio.setEnabled(true);
                    bCrear.setText("Nuevo");
                    bCrear.setMnemonic('N');
                    mostrarAnio();
                    mostrarTotalesResumen();
                    JOptionPane.showMessageDialog(null, "El periodo se ha registrado correctamente", "Mensaje", 2);
                } else {
                    JOptionPane.showMessageDialog(null, "Este año ya está registrado, indique un año distinto e intente nuevamente", "Mensaje", 2);
                }
            } else {
                JOptionPane.showMessageDialog(this, "El año debe tener 4 dígitos", "Mensaje", 2);
            }
        }
    }

    private void editarAnio() {
        if (bEditar.getText().compareTo("Editar") == 0) {
            txtAnio.grabFocus();
            txtAnio.setEditable(true);
            bEliminar.setEnabled(false);
            bCrear.setEnabled(false);
            bEditar.setText("Grabar");
            bEditar.setMnemonic('G');
            txtAnio.requestFocus();
            tablaAnio.setEnabled(false);
            txtAnio.setText(tablaAnio.getValueAt(tablaAnio.getSelectedRow(), 0).toString());
        } else {
            if (txtAnio.getText().trim().length() == 4) {
                if (control.Verificarconsulta("select * from periodoanalisisgastos where anio='" + txtAnio.getText() + "' AND anio<>" + modelo1.getValueAt(tablaAnio.getSelectedRow(), 0).toString() + ";") == false) {
                    for (int n = 0; n < 12; n++) {
                        control.Sql = String.format("UPDATE periodoanalisisgastos p SET p.`anio`=%d WHERE p.`anio`=%d;", Integer.parseInt(txtAnio.getText()), Integer.parseInt(modelo1.getValueAt(tablaAnio.getSelectedRow(), 0).toString()));
                        control.CrearRegistro(control.Sql);
                    }
                    txtAnio.setText("");
                    txtAnio.setEditable(false);
                    tablaAnio.setEnabled(true);
                    bCrear.setEnabled(true);
                    bEditar.setText("Editar");
                    bEditar.setMnemonic('E');
                    mostrarAnio();
                    mostrarTotalesResumen();
                    JOptionPane.showMessageDialog(null, "El periodo se ha actualizado correctamente", "Mensaje", 2);
                } else {
                    JOptionPane.showMessageDialog(null, "Este año ya está registrado, indique un año distinto e intente nuevamente", "Mensaje", 2);
                }
            } else {
                JOptionPane.showMessageDialog(this, "El año debe tener 4 dígitos", "Mensaje", 2);
            }
        }
    }

    private void eliminarAnio() {

        if (tablaAnio.getSelectedRowCount() == 1) {
            if (JOptionPane.showConfirmDialog(null, "¿Confirma que desea eliminar el año seleccionado?", "Mensaje", JOptionPane.YES_NO_OPTION) == 0) {

                control.Sql = "delete from periodoanalisisgastos where anio='" + modelo1.getValueAt(tablaAnio.getSelectedRow(), 0) + "';";

                if (control.ejecutar(control.Sql)) {
                    mostrarAnio();
                    mostrarTotalesResumen();
                } else {
                    JOptionPane.showMessageDialog(this, "No es posible eliminar el año seleccionado ya que actualmente tiene un registro de gastos", "Mensaje", 2);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un año", "Mensaje", 2);
        }

    }

    private void registrarGastos() {
        FrmRegistrarGastos gastos = new FrmRegistrarGastos();
        gastos.setPeriodo(Integer.parseInt(modelo1.getValueAt(tablaAnio.getSelectedRow(), 0).toString()));
        FrmMain.escritorio.add(gastos, JLayeredPane.DEFAULT_LAYER);
//                gastos.setLocation((FrmMain.escritorio.getWidth() - gastos.getWidth()) / 2, 0);
        gastos.setVisible(true);
    }

    private void calcularIngresos() {
        int[] selectedRows = tablaDetalles.getSelectedRows();
        for (int i = 0; i < selectedRows.length; i++) {
            String val = control.DevolverRegistroDto(String.format("SELECT IFNULL(SUM(v.`subTotalInafecto` + v.`subTotalAfecto` + v.`igv`),0.00) FROM venta v WHERE YEAR(v.`fecha`)=%d AND MONTH(v.`fecha`)=%d", anio, Integer.parseInt(modelo2.getValueAt(selectedRows[i], 0).toString())), 1);
            
            System.out.println(String.format("SELECT IFNULL(SUM(v.`subTotalInafecto` + v.`subTotalAfecto` + v.`igv`),0.00) FROM venta v WHERE YEAR(v.`fecha`)=%d AND MONTH(v.`fecha`)=%d", anio, Integer.parseInt(modelo2.getValueAt(selectedRows[i], 0).toString())));
            
            control.ejecutar(String.format("UPDATE periodoanalisisgastos p SET p.`totalIngresos`=%s, p.`neto`= %s-(p.`totalEgresos`+p.`totalOtrosEgresos`) WHERE p.`anio`=%d AND p.`mes`=%d;", val, val, anio, selectedRows[i]));
        }
        mostrarTotalesResumen();
    }

}
