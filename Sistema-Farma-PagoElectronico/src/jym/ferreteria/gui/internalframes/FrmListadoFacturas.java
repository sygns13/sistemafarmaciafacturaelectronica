/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.internalframes;

import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jym.ferreteria.clases.Controlador;
import jym.ferreteria.gui.FrmMain;
import jym.ferreteria.renders.CustomTableModel;
import jym.ferreteria.renders.LabelRenderer;

/**
 *
 * @author JHUNIOR
 */
public class FrmListadoFacturas extends javax.swing.JInternalFrame {

    private Controlador control = new Controlador();
    private CustomTableModel modelo = new CustomTableModel();

    /**
     * Creates new form ListadoFacturas
     */
    public FrmListadoFacturas() {
        initComponents();
        setTitle("Listado de Facturas");
        this.setFrameIcon(new ImageIcon(this.getClass().getResource(Controlador.ICON_PATH)));
        modelo.setColumnIdentifiers(new String[]{"IdFacturaProveedor", "Comprobante", "Número", "Fecha Factura", "Número Entrada", "Fecha Entrada", "RUC", "Proveedor", "Total", "Imp. Pagado", "Pendiente", "Estado", "Observaciones"});
        tablaListadoFacturas.setModel(modelo);
        control.hideTableColumn(tablaListadoFacturas, 0);
        control.tableMaxWidthColumn(tablaListadoFacturas, 100, 1, 2, 3, 4, 5, 6);
//        control.tableMaxWidthColumn(tablaListadoFacturas, 120, 2, 4, 5, 7, 8);
        control.tableWidthColumn(tablaListadoFacturas, 250, 7, 12);
        tablaListadoFacturas.setDefaultRenderer(Object.class, new LabelRenderer());
        LabelRenderer labelRenderer = new LabelRenderer(SwingConstants.RIGHT);
        tablaListadoFacturas.getColumnModel().getColumn(8).setCellRenderer(labelRenderer);
        tablaListadoFacturas.getColumnModel().getColumn(9).setCellRenderer(labelRenderer);
        tablaListadoFacturas.getColumnModel().getColumn(10).setCellRenderer(labelRenderer);
//        tablaListadoFacturas.getColumnModel().getColumn(11).setCellRenderer(labelRenderer);
        tablaListadoFacturas.setSelectionBackground(Color.yellow);

        cargarFacturas();
        tablaListadoFacturas.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                btnPago.setEnabled(true);
                btnImprimirFactura.setEnabled(true);
                btnVerPagos.setEnabled(true);
                btnEliminar.setEnabled(true);
                btnModificar.setEnabled(true);

            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tablaListadoFacturas = new javax.swing.JTable();
        txBuscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnVerPagos = new javax.swing.JButton();
        btnImprimirFactura = new javax.swing.JButton();
        btnPago = new javax.swing.JButton();
        bSalir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Listado de Facturas de proveedor");

        tablaListadoFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaListadoFacturas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaListadoFacturas.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaListadoFacturas);

        txBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txBuscarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txBuscarKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Buscar: ");

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Files-New-File-icon.png"))); // NOI18N
        jButton1.setMnemonic('N');
        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/trash.png"))); // NOI18N
        btnEliminar.setMnemonic('E');
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Actions-document-edit-icon.png"))); // NOI18N
        btnModificar.setMnemonic('M');
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnVerPagos.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnVerPagos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Euro.png"))); // NOI18N
        btnVerPagos.setMnemonic('V');
        btnVerPagos.setText("Ver Detalle de Pagos");
        btnVerPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerPagosActionPerformed(evt);
            }
        });

        btnImprimirFactura.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnImprimirFactura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Print.png"))); // NOI18N
        btnImprimirFactura.setMnemonic('I');
        btnImprimirFactura.setText("Imprimir Comprobante");
        btnImprimirFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirFacturaActionPerformed(evt);
            }
        });

        btnPago.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnPago.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/dollar.png"))); // NOI18N
        btnPago.setMnemonic('P');
        btnPago.setText("Realizar Pago");
        btnPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagoActionPerformed(evt);
            }
        });

        bSalir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/salir.png"))); // NOI18N
        bSalir.setMnemonic('S');
        bSalir.setText("Salir");
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(btnVerPagos, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimirFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPago, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(btnEliminar)
                        .addComponent(btnModificar))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bSalir)
                        .addComponent(btnPago)
                        .addComponent(btnImprimirFactura)
                        .addComponent(btnVerPagos)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1137, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txBuscar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagoActionPerformed
       int row = tablaListadoFacturas.getSelectedRow();
            if (row >= 0) {
                FrmRegistrarPagoFacturaProveedor pagfactura = new FrmRegistrarPagoFacturaProveedor(this);
                pagfactura.setDatosFacturaProveedor(modelo.getValueAt(row, 0).toString(), modelo.getValueAt(row, 7).toString(), modelo.getValueAt(row, 6).toString(),
                        modelo.getValueAt(row, 2).toString(), modelo.getValueAt(row, 8).toString());
                FrmMain.escritorio.add(pagfactura, JLayeredPane.DEFAULT_LAYER);
                pagfactura.setLocation((FrmMain.escritorio.getWidth() - pagfactura.getWidth()) / 2, 0);
                pagfactura.setVisible(true);
                pagfactura.toFront();
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla");
            }
    }//GEN-LAST:event_btnPagoActionPerformed

    private void txBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarKeyReleased
        cargarFacturas();
    }//GEN-LAST:event_txBuscarKeyReleased

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_bSalirActionPerformed

    private void btnImprimirFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirFacturaActionPerformed
        imprimirFactura();
    }//GEN-LAST:event_btnImprimirFacturaActionPerformed

    private void btnVerPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerPagosActionPerformed
        imprimirPagos();
    }//GEN-LAST:event_btnVerPagosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FrmRegistrarFacturaProveedor facturaProveedor = new FrmRegistrarFacturaProveedor(this);

            FrmMain.escritorio.add(facturaProveedor, JLayeredPane.DEFAULT_LAYER);
            facturaProveedor.setLocation((FrmMain.escritorio.getWidth() - facturaProveedor.getWidth()) / 2, 20);
            facturaProveedor.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificar();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarKeyPressed
        control.passFocusTable(evt, tablaListadoFacturas);
    }//GEN-LAST:event_txBuscarKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSalir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnImprimirFactura;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPago;
    private javax.swing.JButton btnVerPagos;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaListadoFacturas;
    private javax.swing.JTextField txBuscar;
    // End of variables declaration//GEN-END:variables

    public void recargar() {
        int row = tablaListadoFacturas.getSelectedRow();
        cargarFacturas();
        if (row >= 0) {
            tablaListadoFacturas.getSelectionModel().setSelectionInterval(row, row);
        }
    }

    private void cargarFacturas() {
        String sqlConEntradaStock = "SELECT f.`idFacturaProveedor`,t.`nombre`, concat(f.`serie`,' - ', f.`numero`) as numerofactura, "
                + "date_format(f.`fecha`,'%d/%m/%Y') as fechafactura, e.`numero` as numeroentrada, "
                + "date_format(e.`fecha`,'%d/%m/%Y') as Fechaentrada, p.`RUC`, p.`Nombre`,"
                + "CONCAT(IF(f.`enSoles`=TRUE,'S/ ','$ '),f.`total`), "
                + "CONCAT(IF(f.`enSoles`=TRUE,'S/ ','$ '),"
                + "@a:=(SELECT IFNULL(SUM(pp.`montoReal`),0.00) FROM `pagoproveedor` pp WHERE pp.`idFacturaProveedor`=f.`idFacturaProveedor`)) AS montoPagado, "
                + "CONCAT(IF(f.`enSoles`=TRUE,'S/ ','$ '),f.total - @a) AS importePendiente, IF(f.`pagado`=FALSE, 'Por pagar','Pagado') AS estado, f.`observaciones`,f.`fecha` "
                + "FROM facturaproveedor f, entradastock e, proveedor p, tipocomprobante t "
                + "WHERE p.`idProveedor`=f.`idProveedor` AND f.`idProveedor`=e.`idProveedor` AND f.`idTipoComprobante`=t.`idTipoComprobante` "
                + "AND e.`idFacturaProveedor`=f.`idFacturaProveedor` "
                + "AND (concat(f.`serie`,' - ', f.`numero`) LIKE '%" + txBuscar.getText() + "%' "
                + "OR e.numero LIKE '%" + txBuscar.getText() + "%' "
                + "OR p.RUC LIKE '%" + txBuscar.getText() + "%' "
                + "OR p.nombre LIKE '%" + txBuscar.getText() + "%' "
                + "OR date_format(f.`fecha`,'%d/%m/%Y') LIKE '%" + txBuscar.getText() + "%')";

        String sqlSinEntradaStock = "SELECT f.`idFacturaProveedor`, t.`nombre`, concat(f.`serie`,' - ', f.`numero`) as numerofactura, "
                + "date_format(f.`fecha`,'%d/%m/%Y') as fechafactura, 'Sin entrada' as numeroentrada, '' as Fechaentrada, "
                + "p.`RUC`, p.`Nombre`,CONCAT(IF(f.`enSoles`=TRUE,'S/ ','$ '),f.`total`) , "
                + "CONCAT(IF(f.`enSoles`=TRUE,'S/ ','$ '),@a:=(SELECT IFNULL(SUM(pp.`montoReal`),0.00) FROM `pagoproveedor` pp WHERE pp.`idFacturaProveedor`=f.`idFacturaProveedor`)) AS montoPagado, "
                + "CONCAT(IF(f.`enSoles`=TRUE,'S/ ','$ '),f.total - @a) AS importePendiente, "
                + "IF(f.`pagado`=FALSE, 'Por pagar','Pagado') AS estado, f.`observaciones`,f.`fecha` "
                + "FROM facturaproveedor f, proveedor p, tipocomprobante t "
                + "WHERE p.`idProveedor`=f.`idProveedor` AND f.`idFacturaProveedor` NOT IN(SELECT es.`idFacturaProveedor` FROM `entradastock` es where isnull(es.`idFacturaProveedor`)=false) "
                + "AND f.`idTipoComprobante`=t.`idTipoComprobante` "
                + "AND(CONCAT(f.`serie`,' - ', f.`numero`) LIKE '%" + txBuscar.getText() + "%' "
                + "OR p.RUC LIKE '%" + txBuscar.getText() + "%' "
                + "OR p.nombre LIKE '%" + txBuscar.getText() + "%' "
                + "OR date_format(f.`fecha`,'%d/%m/%Y') LIKE '%" + txBuscar.getText() + "%')";

        control.LlenarJTabla(modelo, String.format("(%s) UNION (%s) ORDER BY 14", sqlConEntradaStock, sqlSinEntradaStock), 13);
        btnPago.setEnabled(false);
        btnImprimirFactura.setEnabled(false);
        btnVerPagos.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnModificar.setEnabled(false);
    }

    private void imprimirFactura() {
        String idFacturaProveedor = modelo.getValueAt(tablaListadoFacturas.getSelectedRow(), 0).toString();
        Map map = new HashMap();
        map.put("idFacturaProveedor", idFacturaProveedor);
        control.showReportDialog("Factura de proveedor", "FacturaProveedor", map);
    }

    private void imprimirPagos() {
        int row = tablaListadoFacturas.getSelectedRow();
        if (row >= 0) {
            Map map = new HashMap();
            String idfacprove = modelo.getValueAt(row, 0).toString();
            map.put("idFacpro", idfacprove);
            control.showReportDialog("Pago de Proveedores", "FacturaPagoProveedor", map);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla");
        }
    }

    private void modificar() {
         FrmRegistrarFacturaProveedor facturaProveedor = new FrmRegistrarFacturaProveedor(this);
            facturaProveedor.setId(modelo.getValueAt(tablaListadoFacturas.getSelectedRow(), 0).toString());

            FrmMain.escritorio.add(facturaProveedor, JLayeredPane.DEFAULT_LAYER);
            facturaProveedor.setLocation((FrmMain.escritorio.getWidth() - facturaProveedor.getWidth()) / 2, 20);
            facturaProveedor.setVisible(true);
    }

    private void eliminar() {
         if (JOptionPane.showConfirmDialog(this, "Si elimina esta factura del proveedor también se eliminarán los pagos que haya realizado por ésta.\n¿confirma que desea eliminar?", "Eliminar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                String id = modelo.getValueAt(tablaListadoFacturas.getSelectedRow(), 0).toString();
                control.Sql = String.format("SELECT COUNT(e.`idEntradaStock`) FROM entradastock e WHERE e.`idFacturaProveedor`=%s", id);
                String ejecutarMsg = control.ejecutarMsg(control.Sql);
                int resp = -100;
                if (!ejecutarMsg.equals("0")) {
                    resp = JOptionPane.showConfirmDialog(this, "Esta factura está asociada a una Entrada de Stock, "
                            + "si elimina esta factura, la entrada en cuestión será cambiado de "
                            + "estado para ser facturada nuevamente\n¿Confirma que desea continuar la eliminación?", "Alerta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                }
                if (resp == -100 || resp == JOptionPane.YES_OPTION) {
                    control.ejecutar(String.format("UPDATE entradastock e SET e.`facturado`=FALSE, e.`idFacturaProveedor`=NULL WHERE e.`idFacturaProveedor`=%s;", id));
                    control.ejecutar(String.format("DELETE FROM facturaproveedor WHERE `idFacturaProveedor`=%s;", id));
                    cargarFacturas();
                }
            }
    }
}
