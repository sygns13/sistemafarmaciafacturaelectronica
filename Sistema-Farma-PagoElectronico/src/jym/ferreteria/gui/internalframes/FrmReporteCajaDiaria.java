/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.internalframes;

import jym.ferreteria.clases.Controlador;
import jym.ferreteria.clases.InfoGeneral;
import java.awt.Color;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Omr
 */
public class FrmReporteCajaDiaria extends javax.swing.JInternalFrame {

        private Controlador controlador = new Controlador();
        public static final int CAJA_DIARIA = 0;
        public static final int INGRESOS_VENTAS = 1;
        public static final int INGRESOS = 2;
        public static final int GASTOS_PAGO_PROVEEDOR = 3;
        public static final int GASTOS = 4;
        public static final int CAJA_DIARIA_DETALLE = 5;

        private int tipo = CAJA_DIARIA;

        /**
         * Creates new form FrmReporteCajaDiaria
         */
        public FrmReporteCajaDiaria() {
                initComponents();
                jDateChooserDesde.setDate(new Date());
                jDateChooserHasta.setDate(new Date());
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooserDesde = new com.toedter.calendar.JDateChooser();
        jDateChooserHasta = new com.toedter.calendar.JDateChooser();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Caja Diaria");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Desde:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Hasta:");

        jDateChooserDesde.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        jDateChooserHasta.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        btnAceptar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Accept.png"))); // NOI18N
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/cancel.png"))); // NOI18N
        btnCancelar.setMnemonic('C');
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooserDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooserHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooserDesde, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooserHasta, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
                this.dispose();
        }//GEN-LAST:event_btnCancelarActionPerformed

        private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
                imprimir();
        }//GEN-LAST:event_btnAceptarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private com.toedter.calendar.JDateChooser jDateChooserDesde;
    private com.toedter.calendar.JDateChooser jDateChooserHasta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

        private void imprimir() {
                Map map = new HashMap();
                map.put("f_inicio", controlador.Formato_Amd(jDateChooserDesde.getDate()));
                map.put("f_fin", controlador.Formato_Amd(jDateChooserHasta.getDate()));
                map.put("idsede", InfoGeneral.getIdSede());
                switch (this.tipo) {
                        case CAJA_DIARIA:
                                map.put("titulo", "Caja diaria del " + controlador.Formato_Amd1(jDateChooserDesde.getDate(), "/") + " al " + controlador.Formato_Amd1(jDateChooserHasta.getDate(), "/"));
                                controlador.showReportDialog("Reporte de caja diaria", "reporteCierreCajaFecha", map);
                                break;
                        case INGRESOS_VENTAS:
                                map.put("titulo", "Ingreso por ventas del " + controlador.Formato_Amd1(jDateChooserDesde.getDate(), "/") + " al " + controlador.Formato_Amd1(jDateChooserHasta.getDate(), "/"));
                                controlador.showReportDialog("Reporte de caja diaria - Ventas", "cajafinal_subreportIngresosVentas", map);
                                break;
                        case INGRESOS:
                                map.put("titulo", "Ingresos " + controlador.Formato_Amd1(jDateChooserDesde.getDate(), "/") + " al " + controlador.Formato_Amd1(jDateChooserHasta.getDate(), "/"));
                                controlador.showReportDialog("Reporte de caja diaria - Ingresos", "cajafinal_subreportOtrosIngresos", map);
                                break;
                        case GASTOS_PAGO_PROVEEDOR:
                                map.put("titulo", "Gastos por pago a proveedores del " + controlador.Formato_Amd1(jDateChooserDesde.getDate(), "/") + " al " + controlador.Formato_Amd1(jDateChooserHasta.getDate(), "/"));
                                controlador.showReportDialog("Reporte de caja diaria - Pago Proveedores", "cajafinal_subreportPagoProveedor", map);
                                break;
                        case GASTOS:
                                map.put("titulo", "Gastos del " + controlador.Formato_Amd1(jDateChooserDesde.getDate(), "/") + " al " + controlador.Formato_Amd1(jDateChooserHasta.getDate(), "/"));
                                controlador.showReportDialog("Reporte de caja diaria - Gastos", "cajafinal_subreportOtrosGastos", map);
                                break;
                        case CAJA_DIARIA_DETALLE:
                                String montos[]=calcularMontos();
                                map.put("totalIngresos", montos[0]);
                                map.put("totalEgresos", montos[1]);
                                map.put("titulo", "Movimiento de caja del " + controlador.Formato_Amd1(jDateChooserDesde.getDate(), "/") + " al " + controlador.Formato_Amd1(jDateChooserHasta.getDate(), "/"));
                                controlador.showReportDialog("Reporte de caja diaria", "cajafinal", map);
                                break;

                }

        }
        
        
        
        
         private String[] calcularMontos() {
                double cajaInicial = getCajaDiaria();
                double ingresoVentas = getIngresosEnVentas();
                double otrosIngresos = getOtrosIngresos();
                double pagoProveedores = getPagoProvedores();
                double otrosGastos = getOtrosGastos();
                
                double ingreso=ingresoVentas+otrosIngresos;
                String Ingge=(controlador.decimalFormat(ingreso));
                
                double egreso=pagoProveedores+otrosGastos;
                String Egre=(controlador.decimalFormat(egreso));
                
                return new String []{Ingge,Egre};

        }
        
        private double getCajaDiaria() {
                String caja = controlador.DevolverRegistroDto(String.format("SELECT `monto` FROM `cajainicial` WHERE `fecha` between '"+controlador.Formato_Amd(jDateChooserDesde.getDate())+"' and '"+controlador.Formato_Amd(jDateChooserHasta.getDate())+"' AND `idSede`=%s;", InfoGeneral.getIdSede()), 1);
                if (caja == null) {
                        return 0.00;
                }
                return controlador.toDouble(caja);
        }

        private double getIngresosEnVentas() {
                String ventas = controlador.DevolverRegistroDto(String.format("select IFNULL(REPLACE(FORMAT(sum(cv.importe), 2), ',', ''),0.00) from venta v\n" +
"inner join cobroventa cv on cv.`idventa`=v.`idventa`\n" +
"inner join comprobante c on c.`idComprobante`=v.`idComprobante`\n" +
"inner join TipoComprobante t on t.`idTipoComprobante`=c.`idTipoComprobante` where  t.`idSede`='%s' and v.estado<>'Anulado' AND v.`fecha` between '"+controlador.Formato_Amd(jDateChooserDesde.getDate())+"' and '"+controlador.Formato_Amd(jDateChooserHasta.getDate())+"';", InfoGeneral.getIdSede()), 1);
                return Double.parseDouble(ventas);
        }

        private double getOtrosIngresos() {
                String ingresos = controlador.DevolverRegistroDto("SELECT IFNULL(REPLACE(FORMAT(sum(i.monto), 2), ',', ''),0.00) FROM ingresocaja i where i.tipo='Ingreso' and i.fecha between '"+controlador.Formato_Amd(jDateChooserDesde.getDate())+"' and '"+controlador.Formato_Amd(jDateChooserHasta.getDate())+"' AND idSede='" + InfoGeneral.getIdSede() + "'", 1);
                return Double.parseDouble(ingresos);
        }

        private double getPagoProvedores() {
                String pagoProveedor = controlador.DevolverRegistroDto(String.format("SELECT IFNULL(REPLACE(FORMAT(SUM(p.`montoReal`), 2), ',', ''),0.00) FROM pagoproveedor p, facturaproveedor f, tipocomprobante t\n"
                + "WHERE t.`idTipoComprobante`=f.`idTipoComprobante` AND p.`fechapago` between '"+controlador.Formato_Amd(jDateChooserDesde.getDate())+"' and '"+controlador.Formato_Amd(jDateChooserHasta.getDate())+"' AND f.`idFacturaProveedor`=p.`idFacturaProveedor` AND t.`idSede`='%s'", InfoGeneral.getIdSede()), 1);

                return Double.parseDouble(pagoProveedor);
        }

        private double getOtrosGastos() {
                String gastos = controlador.DevolverRegistroDto("SELECT IFNULL(REPLACE(FORMAT(sum(i.monto), 2), ',', ''),0.00) FROM ingresocaja i where i.tipo='Salida' and i.fecha between '"+controlador.Formato_Amd(jDateChooserDesde.getDate())+"' and '"+controlador.Formato_Amd(jDateChooserHasta.getDate())+"' AND idSede='" + InfoGeneral.getIdSede() + "'", 1);
                return Double.parseDouble(gastos);
        }

        public void setTipo(int tipo) {
                this.tipo = tipo;
        }
}
