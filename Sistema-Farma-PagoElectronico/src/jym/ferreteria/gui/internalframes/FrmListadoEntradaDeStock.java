/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.internalframes;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jym.ferreteria.clases.Controlador;
import jym.ferreteria.gui.FrmMain;
import jym.ferreteria.gui.dialogs.FacturarEntradaDeStockDialog;
import jym.ferreteria.renders.CheckBoxCellRenderer;
import jym.ferreteria.renders.CustomTableModel;


import jym.ferreteria.clases.Accesos;


import jym.ferreteria.gui.dialogs.IniciarSesionAdmin;

/**
 *
 * @author Omr
 */
public class FrmListadoEntradaDeStock extends javax.swing.JInternalFrame {

    private Controlador control = new Controlador();
    private CustomTableModel model = new CustomTableModel();
    
     private IniciarSesionAdmin iniciarSesionA = null;
    
    
    private FrmListadoOrdenesdeCompra frmListadoOrdenesdeCompra;
    
    private String tipoUsu="";

    /**
     * Creates new form EntradaDeStock
     */
    public FrmListadoEntradaDeStock() {
        initComponents();
        this.setFrameIcon(new ImageIcon(this.getClass().getResource(Controlador.ICON_PATH)));
        btnFacturar.setComponentPopupMenu(jPopupMenu1);
        this.setFrameIcon(new ImageIcon(this.getClass().getResource(Controlador.ICON_PATH)));
        model.setColumnIdentifiers(new String[]{"Id", "idProveedor", "F", "A", "N° entrada", "Fecha", "N° pedido", "F. Pedido", "Proveedor", "Total"});
        tablaEntradasDeStock.setModel(model);
        control.hideTableColumn(tablaEntradasDeStock, 0, 1,6,7);
        control.tableWidthColumn(tablaEntradasDeStock, 20, 2, 3);
        control.tableWidthColumn(tablaEntradasDeStock, 500, 8);
        tablaEntradasDeStock.getColumnModel().getColumn(2).setCellRenderer(new CheckBoxCellRenderer());
        tablaEntradasDeStock.getColumnModel().getColumn(3).setCellRenderer(new CheckBoxCellRenderer());
        tablaEntradasDeStock.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                btnModificar.setEnabled(true);
                btnImprimir.setEnabled(true);
                btnFacturar.setEnabled(true);
                btnActualizar.setEnabled(true);
                btnEliminar.setEnabled(true);
                if (tablaEntradasDeStock.getSelectedRow() >= 0) {
                    if (model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 3).equals("1")) {
                        btnActualizar.setText("Deshacer Act.");
                        btnActualizar.setMnemonic('D');
                    } else {
                        btnActualizar.setText("Actualizar");
                        btnActualizar.setMnemonic('A');
                    }
                }

            }
        });
        cargarEntradas();
        asignarPermisos();
    }
    
    public void asignarPermisos(){
        tipoUsu=Accesos.getInstance().getTipoUsuario();
    
    }
    
    public void iniciarsesionEliminar(){
        if (this.iniciarSesionA == null) {
            this.iniciarSesionA = new IniciarSesionAdmin(null, true);
        }
        this.iniciarSesionA.setLocationRelativeTo(this);
        this.iniciarSesionA.setVisible(true);
        this.iniciarSesionA.limpiar();
        
        boolean result = this.iniciarSesionA.getResult();
        if (result != false) {
              eliminar();
        }
    }
    
    public void iniciarsesionModificar(){
        if (this.iniciarSesionA == null) {
            this.iniciarSesionA = new IniciarSesionAdmin(null, true);
        }
        this.iniciarSesionA.setLocationRelativeTo(this);
        this.iniciarSesionA.setVisible(true);
        this.iniciarSesionA.limpiar();
        
        boolean result = this.iniciarSesionA.getResult();
        if (result != false) {
               modificar();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEntradasDeStock = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnImprimir = new javax.swing.JButton();
        btnFacturar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        jMenuItem1.setText("Imprimir Factura");
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setIconifiable(true);
        setTitle("Entradas de Stock");

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaEntradasDeStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaEntradasDeStock.setName("tablaEntradasDeStock"); // NOI18N
        tablaEntradasDeStock.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaEntradasDeStock.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaEntradasDeStock);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Buscar: ");
        jLabel1.setName("jLabel1"); // NOI18N

        txtBuscar.setName("txtBuscar"); // NOI18N
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        jPanel1.setName("jPanel1"); // NOI18N

        btnImprimir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Print.png"))); // NOI18N
        btnImprimir.setMnemonic('I');
        btnImprimir.setText("Imprimir");
        btnImprimir.setName("btnImprimir"); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnFacturar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnFacturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/List.png"))); // NOI18N
        btnFacturar.setMnemonic('F');
        btnFacturar.setText("Facturar");
        btnFacturar.setName("btnFacturar"); // NOI18N
        btnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/note-accept-icon.png"))); // NOI18N
        btnActualizar.setMnemonic('A');
        btnActualizar.setText("Actualizar");
        btnActualizar.setName("btnActualizar"); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/trash.png"))); // NOI18N
        btnEliminar.setMnemonic('E');
        btnEliminar.setText("Eliminar");
        btnEliminar.setName("btnEliminar"); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Actions-document-edit-icon.png"))); // NOI18N
        btnModificar.setMnemonic('M');
        btnModificar.setText("Modificar");
        btnModificar.setName("btnModificar"); // NOI18N
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnNuevo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Document.png"))); // NOI18N
        btnNuevo.setMnemonic('N');
        btnNuevo.setText("Nuevo");
        btnNuevo.setName("btnNuevo"); // NOI18N
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/salir.png"))); // NOI18N
        btnSalir.setMnemonic('S');
        btnSalir.setText("Salir");
        btnSalir.setName("btnSalir"); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFacturar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprimir)
                    .addComponent(btnFacturar)
                    .addComponent(btnActualizar)
                    .addComponent(btnSalir)
                    .addComponent(btnNuevo)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        FrmRegistrarEntradasDeStok entradasDeStok = new FrmRegistrarEntradasDeStok(this);
            FrmMain.escritorio.add(entradasDeStok, JLayeredPane.DEFAULT_LAYER);
            entradasDeStok.setLocation((FrmMain.escritorio.getWidth() - entradasDeStok.getWidth()) / 2, 0);
            entradasDeStok.setVisible(true);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
       if(tipoUsu.equals("Superadministrador")||tipoUsu.equals("Administrador")){
        modificar();
        //System.out.println("Admin");
        }
else{
    //JOptionPane.showMessageDialog(null, "No tiene Permisos para realizar esta acción");
    this.iniciarsesionModificar();
   // System.out.println("No-Admin");
}
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        cargarEntradas();
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        actualizar();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturarActionPerformed
        int fila = tablaEntradasDeStock.getSelectedRow();
            if (model.getValueAt(fila, 2).toString().equals("0")) {
                facturar();
            } else {
                JOptionPane.showMessageDialog(this, "La entrada de stock ya está facturado");
            }
    }//GEN-LAST:event_btnFacturarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Confirma que desea eliminar la entrada seleccionada?", "Confirmar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                if(tipoUsu.equals("Superadministrador")||tipoUsu.equals("Administrador")){
        eliminar();
        //System.out.println("Admin");
        }
else{
    //JOptionPane.showMessageDialog(null, "No tiene Permisos para realizar esta acción");
    this.iniciarsesionEliminar();
   // System.out.println("No-Admin");
}
            }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        String id = model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 0).toString();
        Map map = new HashMap();
        map.put("idEntrada", id);
        control.showReportDialog("Ficha de entrada de stock", "entradaStock", map);
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String id = model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 0).toString();
        String idFacturaProveedor = control.ejecutarMsg(String.format("SELECT `idFacturaProveedor` FROM `entradastock` WHERE `idEntradaStock`=%s;", id));
        if (idFacturaProveedor != null && !idFacturaProveedor.equals("")) {
            Map map = new HashMap();
            map.put("idFacturaProveedor", idFacturaProveedor);
            control.showReportDialog("Factura de proveedor", "FacturaProveedor", map);
        } else {
            JOptionPane.showMessageDialog(this, "Esta entrada aún no ha sido facturada");
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnFacturar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaEntradasDeStock;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    private void cargarEntradas() {
        String text = txtBuscar.getText();
        control.LlenarJTabla(model, "SELECT e.`idEntradaStock`,e.`idProveedor`,e.`facturado`, e.`actualizado`, e.`numero`, "
                + "date_format(e.`fecha`,'%d/%m/%Y'), IFNULL(o.`numero`,'') AS numeroPedido, "
                + "IFNULL(date_format(o.`fechaRecibido`,'%d/%m/%Y'),'') AS fechaPedido, p.`Nombre`, "
                + "IFNULL((SELECT format(SUM(d.`cantidad`*d.`costo`),2) FROM `detalleentradastock` d WHERE d.`idEntradaStock`=e.`idEntradaStock`),0.00) As total "
                + "FROM entradastock e LEFT JOIN ordendecompra o ON e.`idOrdenDeCompra`=o.`idOrdenDeCompra`, proveedor p "
                + "WHERE p.`idProveedor`=e.`idProveedor` AND "
                + "(e.`numero` LIKE '%" + text + "%' OR date_format(e.`fecha`,'%d/%m/%Y') LIKE '%" + text + "%' "
                + "OR p.`Nombre`  LIKE '%" + text + "%' OR  o.`numero`  LIKE '%" + text + "%' OR date_format(o.`fechaRecibido`,'%d/%m/%Y')  LIKE '%" + text + "%') ORDER BY e.`numero`;", 10);
        btnModificar.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnFacturar.setEnabled(false);
        btnImprimir.setEnabled(false);
        btnEliminar.setEnabled(false);

    }

    private void modificar() {
        int row = tablaEntradasDeStock.getSelectedRow();
        FrmRegistrarEntradasDeStok entradasDeStok = new FrmRegistrarEntradasDeStok(this);
        entradasDeStok.setEntradStock(model.getValueAt(row, 0).toString());
        entradasDeStok.cargarCabecera();
        FrmMain.escritorio.add(entradasDeStok, JLayeredPane.DEFAULT_LAYER);
        entradasDeStok.setLocation((FrmMain.escritorio.getWidth() - entradasDeStok.getWidth()) / 2, 0);

        entradasDeStok.setVisible(true);

    }

    public void recargar() {
        int row = tablaEntradasDeStock.getSelectedRow();
        cargarEntradas();
        if (row >= 0) {
            tablaEntradasDeStock.getSelectionModel().setSelectionInterval(row, row);
        }
    }

    private void facturar() {

        FacturarEntradaDeStockDialog facturarEntradaDeStock = new FacturarEntradaDeStockDialog(null, true);
        facturarEntradaDeStock.setLocationRelativeTo(null);
        facturarEntradaDeStock.setEntrada(model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 0).toString());
        facturarEntradaDeStock.setVisible(true);
        String resultado = facturarEntradaDeStock.getResultado();
        if (resultado.equals("success")) {
            recargar();
        }
    }

    private void actualizar() {
        String idEntrada = model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 0).toString();
        String actualizadoVal = control.DevolverRegistroDto("SELECT `actualizado` FROM `entradastock` WHERE `idEntradaStock`='" + idEntrada + "';", 1);
        if (actualizadoVal.equals("0")) {
            int result = JOptionPane.showConfirmDialog(this, "Después de actualizar, no se permitirá la modificación de la entrada actual.\nLa actualización de esta entrada actualizará su almacén\n¿Confirma que desea continuar? ", "Atención", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                ResultSet detalleStockResult = control.DevolverRegistro("SELECT `idAlmacen`, `idProducto`, (cantidad*cantReal) as `cantidad`, idDetalleEntradaStock FROM `detalleentradastock` WHERE `idEntradaStock`='" + idEntrada + "';");
                try {
                    while (detalleStockResult.next()) {
                        control.CrearRegistro(String.format("INSERT IGNORE INTO stock VALUES(%d,%d,%d);", detalleStockResult.getInt(1), detalleStockResult.getInt(2), 0));
                        control.EditarRegistro(String.format("UPDATE stock s SET s.`cantidadDisponible`=s.`cantidadDisponible`+%s WHERE s.`idAlmacen`=%d AND s.`idProducto`=%d;", detalleStockResult.getDouble(3), detalleStockResult.getInt(1), detalleStockResult.getInt(2)));
                    
                    control.CrearRegistro(String.format("update lote set activo='1' where idDetalleEntradaStock='%s';", detalleStockResult.getString(4)));
                    }
                    String ordenDeCompra = control.DevolverRegistroDto("SELECT e.`idOrdenDeCompra` FROM entradastock e WHERE e.`idEntradaStock`='" + idEntrada + "'", 1);
                    control.EditarRegistro(String.format("UPDATE entradastock e SET e.`actualizado`=TRUE WHERE e.`idEntradaStock`=%s;", idEntrada));
                    if (ordenDeCompra != null) {
                        control.EditarRegistro(String.format("UPDATE ordendecompra o SET o.`estado`='Entregado',o.`fechaRecibido`=CURDATE() WHERE o.`idOrdenDeCompra`='%s';", ordenDeCompra));
                    }
                    recargar();
                    try {
                        FrmProductosBajosDeStock.cargarDatos();
                        frmListadoOrdenesdeCompra.cargarOrdenes();
                        
                    } catch (Exception e) {
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FrmRegistrarEntradasDeStok.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (actualizadoVal.equals("1")) {//deshaciendo la actualización
            if (model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 2).toString().equals("1")) {
                int result = JOptionPane.showConfirmDialog(this, "La entrada de stock ha sido facturado.¿Desea continuar con la desctualización de la entrada?", "Atención", JOptionPane.YES_NO_OPTION);
                if (result != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Deshacer la actualización de stock, restaurará el stock incrementado por la entrada de stock a su nivel anterior", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            int result = JOptionPane.showConfirmDialog(this, "¿Está seguro de deshacer la actualización de entrada de stock?", "Atención", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                ResultSet detalleStockResult = control.DevolverRegistro("SELECT `idAlmacen`, `idProducto`, (cantidad*cantReal) as `cantidad`, idDetalleEntradaStock FROM `detalleentradastock` WHERE `idEntradaStock`='" + idEntrada + "';");
                try {
                    while (detalleStockResult.next()) {
                        control.EditarRegistro(String.format("UPDATE stock s SET s.`cantidadDisponible`=s.`cantidadDisponible`-%s WHERE s.`idAlmacen`=%d AND s.`idProducto`=%d;", detalleStockResult.getDouble(3), detalleStockResult.getInt(1), detalleStockResult.getInt(2)));
                        
                        control.CrearRegistro(String.format("update lote set activo='3' where idDetalleEntradaStock='%s';", detalleStockResult.getString(4)));
                    }
                    control.EditarRegistro(String.format("UPDATE entradastock e SET e.`actualizado`=FALSE WHERE e.`idEntradaStock`=%s;", idEntrada));
                    String ordenDeCompra = control.DevolverRegistroDto("SELECT e.`idOrdenDeCompra` FROM entradastock e WHERE e.`idEntradaStock`='" + idEntrada + "'", 1);
                    control.EditarRegistro(String.format("UPDATE ordendecompra o SET o.`estado`='Por Entregar', o.`fechaRecibido`=NULL WHERE o.`idOrdenDeCompra`='%s';", ordenDeCompra == null ? "" : ordenDeCompra));

                    recargar();
                    try {
                        FrmProductosBajosDeStock.cargarDatos();
                    } catch (Exception e) {
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FrmRegistrarEntradasDeStok.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }

    private void eliminar() {
if (JOptionPane.showConfirmDialog(null, "Al eliminar la Compra seleccionada se actualizará los almacenes con los productos contenidos en esta Compra."
                    + "\n¿Confirma que desea eliminar la Compra seleccionada?", "Mensaje", JOptionPane.YES_NO_OPTION) == 0) {
        int f = tablaEntradasDeStock.getSelectedRow();
//        if (model.getValueAt(f, 2).toString().equals("1")) {
//            JOptionPane.showMessageDialog(this, "No se puede eliminar una entrada facturada", "Aviso", JOptionPane.WARNING_MESSAGE);
//            return;
//        }
//        if (model.getValueAt(f, 3).toString().equals("1")) {
//            JOptionPane.showMessageDialog(this, "No se puede eliminar una entrada actualizada", "Aviso", JOptionPane.WARNING_MESSAGE);
//            return;
//        }
        String idEntrada = model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 0).toString();
        control.Sql="SELECT d.idDetalleEntradastock,d.identradastock,(d.cantidad*d.cantReal) as Cantidad,actualizado FROM entradastock e\n" +
                        "inner join detalleentradastock d on e.identradastock=d.identradastock\n" +
                        "where e.identradastock='"+ model.getValueAt(f, 0).toString()+"';";
        
        String actualizadoVal = control.DevolverRegistroDto("SELECT `actualizado` FROM `entradastock` WHERE `idEntradaStock`='" + idEntrada + "';", 1);
        
        if (actualizadoVal.equals("1")) {//deshaciendo la actualización
            if (model.getValueAt(tablaEntradasDeStock.getSelectedRow(), 3).toString().equals("1")) {
              
                ResultSet detalleStockResult = control.DevolverRegistro("SELECT `idAlmacen`, `idProducto`, (`cantidad`*`cantReal`) as Cantidad, idDetalleEntradaStock FROM `detalleentradastock` WHERE `idEntradaStock`='" + idEntrada + "';");
                try {
                    while (detalleStockResult.next()) {
                        control.EditarRegistro(String.format("UPDATE stock s SET s.`cantidadDisponible`=s.`cantidadDisponible`-%d WHERE s.`idAlmacen`=%d AND s.`idProducto`=%d;", detalleStockResult.getInt(3), detalleStockResult.getInt(1), detalleStockResult.getInt(2)));
                        control.CrearRegistro(String.format("update lote set activo='0' where idDetalleEntradaStock='%s';", detalleStockResult.getString(4)));
                    }
                    control.EditarRegistro(String.format("UPDATE entradastock e SET e.`actualizado`=FALSE WHERE e.`idEntradaStock`=%s;", idEntrada));
                    String ordenDeCompra = control.DevolverRegistroDto("SELECT e.`idOrdenDeCompra` FROM entradastock e WHERE e.`idEntradaStock`='" + idEntrada + "'", 1);
                    control.EditarRegistro(String.format("UPDATE ordendecompra o SET o.`estado`='Por Entregar', o.`fechaRecibido`=NULL WHERE o.`idOrdenDeCompra`='%s';", ordenDeCompra == null ? "" : ordenDeCompra));

                    recargar();
                    try {
                        FrmProductosBajosDeStock.cargarDatos();
                    } catch (Exception e) {
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FrmRegistrarEntradasDeStok.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
        
         ResultSet detalleStockResult1 = control.DevolverRegistro("SELECT idDetalleEntradaStock FROM `detalleentradastock` WHERE `idEntradaStock`='" + idEntrada + "';");
         try {
                    while (detalleStockResult1.next()) {
                        control.EditarRegistro(String.format("DELETE FROM lote WHERE `idDetalleEntradaStock`=%s;", detalleStockResult1.getInt(1)));
                    }
                  
                } catch (SQLException ex) {
                    Logger.getLogger(FrmRegistrarEntradasDeStok.class.getName()).log(Level.SEVERE, null, ex);
                }
        
        String result = control.EliminarRegistro(String.format("DELETE FROM entradastock WHERE `idEntradaStock`=%s;", model.getValueAt(f, 0).toString()));
        if (result.toLowerCase().contains("error")) {
            JOptionPane.showMessageDialog(this, "No se ha podido eliminar la entrada", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            cargarEntradas();
        }
    } }

}
