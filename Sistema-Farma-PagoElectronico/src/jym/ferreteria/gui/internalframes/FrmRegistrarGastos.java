/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jym.ferreteria.gui.internalframes;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import jxl.CellView;
import jxl.Workbook;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.Colour;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jym.ferreteria.clases.Controlador;
import jym.ferreteria.clases.InfoGeneral;
import jym.ferreteria.gui.FrmMain;
import jym.ferreteria.gui.panels.PanelGastoMes;
import jym.ferreteria.gui.panels.PanelResumenGastos;

/**
 *
 * @author Omr
 */
public class FrmRegistrarGastos extends javax.swing.JInternalFrame {

    public static Controlador control = new Controlador();
    private int periodo = 0;
    private final String[] MESES = new String[]{"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre"};
    private PanelGastoMes panelGastoMes;
    private static boolean comboClasificacionListo;
    private static final Map mapClasificacion = new HashMap();
    private static final Map mapConceptos = new HashMap();
    private String idGasto;
    private PanelResumenGastos panelResumenGastos;
    private JFileChooser chooser = new JFileChooser();
    private int mes = 0;
    private boolean comboAnioListo;

    /**
     * Creates new form RegistrarGastos
     */
    public FrmRegistrarGastos() {
        initComponents();
        Calendar calendar = new GregorianCalendar();
        mes = calendar.get(Calendar.MONTH);
        periodo = calendar.get(Calendar.YEAR);
        jProgressBar1.setVisible(false);
        this.setFrameIcon(new ImageIcon(this.getClass().getResource(Controlador.ICON_PATH)));
        control.LlenarCombo(cboAnio, "SELECT DISTINCT `anio` FROM `periodoanalisisgastos` ORDER BY `anio`;", 1);
        comboAnioListo = true;
        llenarCombo();
        try {
            cboClasificacion.setSelectedIndex(0);
        } catch (Exception e) {
        }

        setTitle("Registro gastos anuales " + " " + calendar.get(Calendar.YEAR));

        comboClasificacionListo = true;
        panelGastoMes = new PanelGastoMes();
        this.setSize(FrmMain.escritorio.getSize());
        crearTab();
        listeners();
        this.activar(false);
        this.limpiar();
        jTabbedPane.setSelectedIndex(0);
        jDateChooserFecha.setLocale(new Locale("es", "ES"));
        jDateChooserFecha.setDateFormatString("dd/MM/yyyy");
        jDateChooserFecha.getJCalendar().setDecorationBackgroundColor(Color.yellow);
        try {
            cboAnio.setSelectedItem("" + calendar.get(Calendar.YEAR));
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        btnAdd = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        cboConceptos = new javax.swing.JComboBox();
        jDateChooserFecha = new com.toedter.calendar.JDateChooser();
        txtDetalles = new javax.swing.JTextField();
        txtImporte = new javax.swing.JTextField();
        lblConcepto = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblDetalles = new javax.swing.JLabel();
        lblImporte = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(6, 0), new java.awt.Dimension(6, 0), new java.awt.Dimension(6, 32767));
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        cboAnio = new javax.swing.JComboBox();
        cboClasificacion = new javax.swing.JComboBox();
        lblClasificacion = new javax.swing.JLabel();
        chkAgrupar = new javax.swing.JCheckBox();

        FormListener formListener = new FormListener();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Administración de gastos anuales");
        setAutoscrolls(true);
        addInternalFrameListener(formListener);

        jTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane.setName("jTabbedPane"); // NOI18N
        jTabbedPane.addChangeListener(formListener);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/add-icon.png"))); // NOI18N
        btnAdd.setMnemonic('N');
        btnAdd.setText("Nuevo");
        btnAdd.setName("btnAdd"); // NOI18N
        btnAdd.setSelected(true);
        btnAdd.addActionListener(formListener);

        jSeparator1.setName("jSeparator1"); // NOI18N

        cboConceptos.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        cboConceptos.setName("cboConceptos"); // NOI18N
        cboConceptos.addKeyListener(formListener);

        jDateChooserFecha.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jDateChooserFecha.setName("jDateChooserFecha"); // NOI18N

        txtDetalles.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        txtDetalles.setName("txtDetalles"); // NOI18N
        txtDetalles.addKeyListener(formListener);

        txtImporte.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtImporte.setText("0.00");
        txtImporte.setName("txtImporte"); // NOI18N
        txtImporte.addKeyListener(formListener);

        lblConcepto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblConcepto.setText("Concepto:");
        lblConcepto.setName("lblConcepto"); // NOI18N

        lblFecha.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblFecha.setText("Fecha:");
        lblFecha.setName("lblFecha"); // NOI18N

        lblDetalles.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblDetalles.setText("Detalles");
        lblDetalles.setName("lblDetalles"); // NOI18N

        lblImporte.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblImporte.setText("Importe");
        lblImporte.setName("lblImporte"); // NOI18N

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/trash-icon.png"))); // NOI18N
        btnDelete.setMnemonic('E');
        btnDelete.setText("Eliminar");
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.addActionListener(formListener);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/pencil-icon.png"))); // NOI18N
        btnEdit.setMnemonic('M');
        btnEdit.setText("Modificar");
        btnEdit.setName("btnEdit"); // NOI18N
        btnEdit.addActionListener(formListener);

        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Copy-icon.png"))); // NOI18N
        btnCopy.setMnemonic('C');
        btnCopy.setText("Copiar");
        btnCopy.setName("btnCopy"); // NOI18N
        btnCopy.addActionListener(formListener);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Actions-edit-delete-icon.png"))); // NOI18N
        jButton1.setText("Cancelar");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(formListener);

        filler1.setName("filler1"); // NOI18N

        filler2.setName("filler2"); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Excel-icon.png"))); // NOI18N
        jButton2.setText("Exportar a excel");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(formListener);

        jProgressBar1.setMaximum(13);
        jProgressBar1.setName("jProgressBar1"); // NOI18N

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setText("Año: ");
        jLabel10.setName("jLabel10"); // NOI18N

        cboAnio.setName("cboAnio"); // NOI18N
        cboAnio.addActionListener(formListener);

        cboClasificacion.setName("cboClasificacion"); // NOI18N
        cboClasificacion.addActionListener(formListener);

        lblClasificacion.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblClasificacion.setText("Clasificación");
        lblClasificacion.setName("lblClasificacion"); // NOI18N

        chkAgrupar.setSelected(true);
        chkAgrupar.setText("Agrupar Conceptos");
        chkAgrupar.setName("chkAgrupar"); // NOI18N
        chkAgrupar.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboClasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboConceptos, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addComponent(jTabbedPane)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(781, 781, 781)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(chkAgrupar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(btnCopy)
                                .addComponent(btnDelete)
                                .addComponent(btnEdit)
                                .addComponent(btnAdd)
                                .addComponent(jButton2)
                                .addComponent(chkAgrupar)))
                        .addGap(8, 8, 8)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(lblDetalles)
                    .addComponent(lblImporte)
                    .addComponent(lblConcepto)
                    .addComponent(lblClasificacion))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooserFecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboConceptos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboClasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, javax.swing.event.ChangeListener, javax.swing.event.InternalFrameListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == btnAdd) {
                FrmRegistrarGastos.this.btnAddActionPerformed(evt);
            }
            else if (evt.getSource() == btnDelete) {
                FrmRegistrarGastos.this.btnDeleteActionPerformed(evt);
            }
            else if (evt.getSource() == btnEdit) {
                FrmRegistrarGastos.this.btnEditActionPerformed(evt);
            }
            else if (evt.getSource() == btnCopy) {
                FrmRegistrarGastos.this.btnCopyActionPerformed(evt);
            }
            else if (evt.getSource() == jButton1) {
                FrmRegistrarGastos.this.jButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton2) {
                FrmRegistrarGastos.this.jButton2ActionPerformed(evt);
            }
            else if (evt.getSource() == cboAnio) {
                FrmRegistrarGastos.this.cboAnioActionPerformed(evt);
            }
            else if (evt.getSource() == cboClasificacion) {
                FrmRegistrarGastos.this.cboClasificacionActionPerformed(evt);
            }
            else if (evt.getSource() == chkAgrupar) {
                FrmRegistrarGastos.this.chkAgruparActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == cboConceptos) {
                FrmRegistrarGastos.this.cboConceptosKeyPressed(evt);
            }
            else if (evt.getSource() == txtDetalles) {
                FrmRegistrarGastos.this.txtDetallesKeyPressed(evt);
            }
            else if (evt.getSource() == txtImporte) {
                FrmRegistrarGastos.this.txtImporteKeyPressed(evt);
            }
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == txtImporte) {
                FrmRegistrarGastos.this.txtImporteKeyTyped(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == jTabbedPane) {
                FrmRegistrarGastos.this.jTabbedPaneStateChanged(evt);
            }
        }

        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            if (evt.getSource() == FrmRegistrarGastos.this) {
                FrmRegistrarGastos.this.formInternalFrameOpened(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        this.setLocation(0, 0);
        if (cboAnio.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Para poder registrar los gastos debe de haber un periodo activo", "Mensaje", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } else {
            jTabbedPane.setSelectedIndex(mes);
            jTabbedPane.setBackgroundAt(mes, Color.yellow);
            jTabbedPane.setForegroundAt(mes, Color.blue);
            cargarGastos();
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneStateChanged

        cargarGastos();

    }//GEN-LAST:event_jTabbedPaneStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if ("Nuevo".equals(btnAdd.getText())) {
            btnAdd.setText("Grabar");
            btnAdd.setMnemonic('G');
            this.activar(true);
            habilitarBotones(false);
            btnAdd.setEnabled(true);
            cboConceptos.requestFocus();
        } else {
            this.grabarGastos();

        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtDetallesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDetallesKeyPressed
        if (control.isEnterKey(evt)) {
            txtImporte.selectAll();
            txtImporte.grabFocus();

        }
    }//GEN-LAST:event_txtDetallesKeyPressed

    private void txtImporteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImporteKeyPressed
        if (control.isEnterKey(evt)) {
            if (btnAdd.isEnabled()) {
                this.grabarGastos();
            } else {
                this.actualizarGasto();
            }
        }
    }//GEN-LAST:event_txtImporteKeyPressed

    private void cboConceptosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboConceptosKeyPressed
        if (control.isEnterKey(evt)) {

            ((JTextField) jDateChooserFecha.getDateEditor()).requestFocus();
        }
    }//GEN-LAST:event_cboConceptosKeyPressed

    private void txtImporteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImporteKeyTyped
        control.decimal(evt, txtImporte.getText());
    }//GEN-LAST:event_txtImporteKeyTyped

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (btnEdit.getText().equals("Modificar")) {
            btnEdit.setText("Grabar");
            btnEdit.setMnemonic('G');
            activar(true);
            cargarDatosGasto();
            habilitarBotones(false);
            btnAdd.setEnabled(false);
            btnEdit.setEnabled(true);
        } else {
            actualizarGasto();
        }

    }//GEN-LAST:event_btnEditActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        activar(false);
        limpiar();
        habilitarBotones(panelGastoMes.getTablaGastos().getSelectedRow() >= 0);
        if (jTabbedPane.getSelectedIndex() == 12) {
            btnAdd.setEnabled(false);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        btnAdd.setText("Grabar");
        btnAdd.setMnemonic('G');
        habilitarBotones(false);
        btnAdd.setEnabled(true);
        activar(true);
        cargarDatosGasto();
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        eliminarGasto();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        imprimirExcel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cboAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAnioActionPerformed
        try {
            this.periodo = Integer.parseInt(cboAnio.getSelectedItem().toString());
            jTabbedPane.setSelectedIndex(mes);
            jTabbedPane.setForegroundAt(mes, Color.blue);
            jTabbedPane.getTabComponentAt(mes).setBackground(Color.yellow);

        } catch (Exception e) {
//            e.printStackTrace();
        }
        cargarGastos();
        setTitle("Registro gastos anuales " + " " + periodo);
    }//GEN-LAST:event_cboAnioActionPerformed

    private void cboClasificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClasificacionActionPerformed
        if (comboClasificacionListo) {
            control.fillComboBox(String.format("SELECT `idConceptoGastos`, `nombre` FROM `conceptogastos` WHERE `idClasificacionGastos`=%s ORDER BY `nombre`;", mapClasificacion.get(cboClasificacion.getSelectedIndex())), cboConceptos, mapConceptos);
        }
    }//GEN-LAST:event_cboClasificacionActionPerformed

    private void chkAgruparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAgruparActionPerformed
        panelResumenGastos.load(periodo, chkAgrupar.isSelected());
        btnAdd.setEnabled(false);
        ocultarComponentes(false);
    }//GEN-LAST:event_chkAgruparActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox cboAnio;
    public static javax.swing.JComboBox cboClasificacion;
    public static javax.swing.JComboBox cboConceptos;
    private javax.swing.JCheckBox chkAgrupar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDateChooserFecha;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel lblClasificacion;
    private javax.swing.JLabel lblConcepto;
    private javax.swing.JLabel lblDetalles;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblImporte;
    private javax.swing.JTextField txtDetalles;
    private javax.swing.JTextField txtImporte;
    // End of variables declaration//GEN-END:variables

    private void crearTab() {
        ImageIcon imageIcon = new javax.swing.ImageIcon(getClass().getResource("/jym/ferreteria/imagenes/Calendar-icon.png"));
        for (String mes : MESES) {
            jTabbedPane.addTab(mes, imageIcon, new JLabel());
            jTabbedPane.setFont(new Font("Arial", Font.BOLD, 12));
        }
        panelResumenGastos = new PanelResumenGastos();

        jTabbedPane.addTab("Resumen", imageIcon, panelResumenGastos);
        jTabbedPane.setFont(new Font("Arial", Font.BOLD, 12));
    }

    private void activar(boolean b) {
        cboClasificacion.setEnabled(b);
        cboConceptos.setEnabled(b);
        jDateChooserFecha.setEnabled(b);
        txtDetalles.setEnabled(b);
        txtImporte.setEnabled(b);

    }

    private void limpiar() {
        btnAdd.setSelected(true);
        btnAdd.setEnabled(true);
        try {
            cboConceptos.setSelectedIndex(0);
        } catch (Exception e) {
        }

        jDateChooserFecha.setDate(new Date());
        txtDetalles.setText("");
        txtImporte.setText("0.00");
        btnAdd.setText("Nuevo");
        btnAdd.setMnemonic('N');
        btnEdit.setText("Modificar");
        btnEdit.setMnemonic('M');
        panelGastoMes.getTablaGastos().setEnabled(true);

        habilitarBotones(panelGastoMes.getTablaGastos().getSelectedRow() >= 0);

    }

    private void grabarGastos() {
        double importe = 0;

        if (cboConceptos.getSelectedIndex() > -1) {
            if (jDateChooserFecha.getDate() != null) {
                if (control.isDouble(txtImporte.getText())) {
                    importe = Double.parseDouble(txtImporte.getText().replace(",", ""));
                }
                if (importe > 0) {
                    mapConceptos.get(cboConceptos.getSelectedIndex());
                    String Fecha = control.Formato_Amd(jDateChooserFecha.getDate());
                    control.Sql = "insert into gastos values(null," + periodo + "," + jTabbedPane.getSelectedIndex() + "," + mapConceptos.get(cboConceptos.getSelectedIndex()) + ",'" + Fecha + "','" + txtDetalles.getText() + "','" + importe + "','"+InfoGeneral.getIdSede()+"');";
                    System.out.println(control.Sql);
                    if (control.ejecutar(control.Sql)) {
                        panelGastoMes.setPeriodo(periodo, jTabbedPane.getSelectedIndex());
                        limpiar();
                        activar(false);
                        habilitarBotones(false);
                        actualizarTotalEgresos();
                    } else {
                        JOptionPane.showMessageDialog(this, "Ocurrió un error al registrar el gasto", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(panelGastoMes, "Debe el importe debe de ser mayor a cero");
                }
            } else {
                JOptionPane.showMessageDialog(panelGastoMes, "Debe ingresar una Fecha");
            }
        } else {
            JOptionPane.showMessageDialog(panelGastoMes, "Debe seleccionar un Concepto");
        }

    }

    private void listeners() {
        panelGastoMes.getTablaGastos().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 1 && panelGastoMes.getTablaGastos().isEnabled()) {
                    btnEdit.doClick();
                }
            }
        });
        panelGastoMes.getTablaGastos().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                btnEdit.setEnabled(true);
                btnDelete.setEnabled(true);
            }
        });

        ((JTextField) jDateChooserFecha.getDateEditor()).addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (control.isEnterKey(e)) {
                    txtDetalles.grabFocus();
                }
            }

        });
        panelGastoMes.getTablaGastos().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                habilitarBotones(true);
            }
        });
        panelGastoMes.getTablaGastos().addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 1) {
                    if (btnEdit.getText().equals("Modificar")) {
                        btnEdit.setText("Grabar");
                        btnEdit.setMnemonic('G');
                        habilitarBotones(false);
                        btnAdd.setEnabled(false);
                        btnEdit.setEnabled(true);
                        activar(true);
                        cargarDatosGasto();
                    }
                }
            }

        });
    }

    private void cargarDatosGasto() {
        int row = panelGastoMes.getTablaGastos().getSelectedRow();
        TableModel model = panelGastoMes.getTablaGastos().getModel();
        idGasto = model.getValueAt(row, 0).toString();
        cboClasificacion.setSelectedItem(model.getValueAt(row, 1));
        cboConceptos.setSelectedItem(model.getValueAt(row, 2).toString());
        ((JTextField) jDateChooserFecha.getDateEditor()).setText(model.getValueAt(row, 3).toString().split(" ")[1]);
        txtDetalles.setText(model.getValueAt(row, 4).toString());
        txtImporte.setText(model.getValueAt(row, 5).toString());
        cboConceptos.requestFocus();
        panelGastoMes.getTablaGastos().setEnabled(false);
    }

    private void actualizarGasto() {
        double importe = 0;

        if (cboConceptos.getSelectedIndex() > -1) {
            if (jDateChooserFecha.getDate() != null) {
                if (control.isDouble(txtImporte.getText())) {
                    importe = Double.parseDouble(txtImporte.getText().replace(",", ""));
                }
                if (importe > 0) {
                    mapConceptos.get(cboConceptos.getSelectedIndex());
                    String Fecha = control.Formato_Amd(jDateChooserFecha.getDate());
                    control.Sql = String.format("UPDATE gastos g SET g.`idConceptoGastos`=%s, g.`fecha`='%s', g.`detalle`='%s', g.`importe`=%s,g.`idsede`='%s' WHERE g.`idGastos`=%s;", mapConceptos.get(cboConceptos.getSelectedIndex()), Fecha, txtDetalles.getText(), importe,InfoGeneral.getIdSede(), idGasto);

                    if (control.ejecutar(control.Sql)) {
                        panelGastoMes.setPeriodo(periodo, jTabbedPane.getSelectedIndex());
                        habilitarBotones(false);
                        limpiar();
                        activar(false);
                        actualizarTotalEgresos();
                    } else {
                        JOptionPane.showMessageDialog(this, "Ocurrió un error al actualizar el gasto", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(panelGastoMes, "Debe el importe debe de ser mayor a cero");
                }
            } else {
                JOptionPane.showMessageDialog(panelGastoMes, "Debe ingresar una Fecha");
            }
        } else {
            JOptionPane.showMessageDialog(panelGastoMes, "Debe seleccionar un Concepto");
        }

    }

    private void habilitarBotones(boolean b) {
        btnDelete.setEnabled(b);
        btnEdit.setEnabled(b);
        btnCopy.setEnabled(b);
    }

    private void eliminarGasto() {
        if (JOptionPane.showConfirmDialog(this, "¿Confirma que desea eliminar el item de gasto seleccionado?", "Mensaje", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            JTable tablaGastos = panelGastoMes.getTablaGastos();
            control.ejecutar(String.format("DELETE FROM gastos WHERE `idGastos`=%s;", tablaGastos.getValueAt(tablaGastos.getSelectedRow(), 0).toString()));
            panelGastoMes.setPeriodo(periodo, jTabbedPane.getSelectedIndex());
            habilitarBotones(false);
            actualizarTotalEgresos();
        }
    }

    void setPeriodo(int periodo) {
        this.periodo = periodo;
        setTitle(getTitle() + " " + periodo);
        cboConceptos.setSelectedItem(periodo);
    }

    private void imprimirExcel() {

        //verifica la direccion, el nombre
        int showSaveDialog = chooser.showSaveDialog(this);
        if (showSaveDialog == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File selectedFile = chooser.getSelectedFile();
        if (!selectedFile.getName().endsWith(".xls")) {
            selectedFile = new File(selectedFile.toString() + ".xls");
        }
        if (selectedFile.exists()) {
            int showConfirmDialog = JOptionPane.showConfirmDialog(chooser, "El archivo " + selectedFile.toString()
                    + "\nya existe ¿Desea Reemplazarlo?", "Exportar", JOptionPane.YES_NO_OPTION);
            if (showConfirmDialog == JOptionPane.NO_OPTION || showConfirmDialog == JOptionPane.CLOSED_OPTION) {
                return;
            }
        }
        // fin verifica
        WritableWorkbook workbook;
        try {
            jProgressBar1.setVisible(true);
            workbook = Workbook.createWorkbook(selectedFile);
            escribirMeses(workbook);
            escribirResumen(workbook);
            workbook.write();
            workbook.close();
            JOptionPane.showMessageDialog(null, "Se ha creado el archivo " + selectedFile.toString());
        } catch (IOException ex) {
            Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
        }

        jProgressBar1.setVisible(false);
    }

    private void escribirMeses(WritableWorkbook workbook) {
        try {

            WritableFont font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.BOLD);
            WritableCellFormat cellFormatTitulo = new WritableCellFormat(font);
            cellFormatTitulo.setAlignment(Alignment.CENTRE);

            WritableCellFormat cellFormatClasificacion = new WritableCellFormat(font);
            cellFormatClasificacion.setBorder(Border.ALL, BorderLineStyle.DASHED, Colour.BLACK);
            cellFormatClasificacion.setAlignment(Alignment.LEFT);

            font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
            WritableCellFormat cellFormatConcepto = new WritableCellFormat(font);
            cellFormatConcepto.setBorder(Border.ALL, BorderLineStyle.DASHED, Colour.BLACK);
            cellFormatConcepto.setAlignment(Alignment.LEFT);

            font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.BOLD);
            WritableCellFormat cellFormatCabecera = new WritableCellFormat(font);
            cellFormatCabecera.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            cellFormatCabecera.setAlignment(Alignment.CENTRE);

            font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
            WritableCellFormat cellFormatTotalImportes = new WritableCellFormat(font);
            cellFormatTotalImportes.setBorder(Border.ALL, BorderLineStyle.DASHED, Colour.BLACK);
            cellFormatTotalImportes.setAlignment(Alignment.RIGHT);
            for (int i = 0; i < 12; i++) {
                jProgressBar1.setValue(i);
                int fila = 4;
                WritableSheet sheet = workbook.createSheet(MESES[i], i);

                sheet.addCell(new Label(2, 1, "GASTOS DEL MES DE " + MESES[i].toUpperCase(), cellFormatTitulo));
                sheet.mergeCells(2, 1, 5, 1);

                CellView cellView = new CellView();
                cellView.setAutosize(true);
                sheet.setColumnView(2, cellView);
                sheet.setColumnView(3, cellView);
                sheet.setColumnView(4, cellView);
                sheet.setColumnView(5, cellView);

                sheet.addCell(new Label(2, 3, "Concepto", cellFormatCabecera));
                sheet.addCell(new Label(3, 3, "Fecha", cellFormatCabecera));
                sheet.addCell(new Label(4, 3, "Detalle", cellFormatCabecera));
                sheet.addCell(new Label(5, 3, "Importe", cellFormatCabecera));

                ResultSet resultClasificacion = control.DevolverRegistro(String.format("SELECT c.`idClasificacionGastos`,c.`nombre`,FORMAT(SUM(g.`importe`),2) AS importe,IF(c.`idClasificacionGastos`=1, 1, 0) AS orden "
                        + "FROM clasificaciongastos c, conceptogastos co, gastos g "
                        + "WHERE c.`idClasificacionGastos`=co.`idClasificacionGastos` "
                        + "AND co.`idConceptoGastos`=g.`idConceptoGastos` AND g.`anio`=%d AND g.`mes`=%d "
                        + "GROUP BY c.`idClasificacionGastos` "
                        + "ORDER BY orden, c.`nombre`;", periodo, i));
                try {
                    while (resultClasificacion.next()) {

                        sheet.addCell(new Label(2, fila, resultClasificacion.getString(2).toUpperCase(), cellFormatClasificacion));
                        sheet.addCell(new Label(5, fila, resultClasificacion.getString(3), cellFormatTotalImportes));
                        sheet.mergeCells(2, fila, 4, fila);

                        fila++;
                        ResultSet resultConceptos = control.DevolverRegistro("SELECT c.`nombre`, CONCAT(diaIndice(WEEKDAY(g.`fecha`)), ' ',date_format(g.`fecha`,'%d/%m/%Y')), g.`detalle`, g.`importe` FROM conceptogastos c, gastos g "
                                + "WHERE g.`idConceptoGastos`=c.`idConceptoGastos` AND c.`idClasificacionGastos`='" + resultClasificacion.getInt(1) + "' AND g.`anio`=" + periodo + " AND g.`mes`=" + i + ";");
                        while (resultConceptos.next()) {
                            sheet.addCell(new Label(2, fila, resultConceptos.getString(1) + "  ", cellFormatConcepto));
                            sheet.addCell(new Label(3, fila, resultConceptos.getString(2) + "  ", cellFormatConcepto));
                            sheet.addCell(new Label(4, fila, resultConceptos.getString(3) + "  ", cellFormatConcepto));
                            sheet.addCell(new Label(5, fila, resultConceptos.getString(4) + "  ", cellFormatTotalImportes));
                            fila++;

                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        } catch (WriteException ex) {
            Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex, "Error", 0);
        }

    }

    private void escribirResumen(WritableWorkbook workbook) {
        try {
            WritableSheet sheet = workbook.createSheet("Resumen", 12);
            WritableFont font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.BOLD);

            WritableCellFormat cellFormat = new WritableCellFormat(font);

            cellFormat.setAlignment(Alignment.CENTRE);

            sheet.addCell(new Label(0, 0, "REPORTE RESUMEN DE REGISTRO DE GASTOS", cellFormat));

            sheet.mergeCells(0, 0, 13, 0);

            cellFormat = new WritableCellFormat(font);

            cellFormat.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            sheet.addCell(new Label(0, 3, "Conceptos", cellFormat));
            sheet.addCell(new Label(1, 3, "Enero", cellFormat));
            sheet.addCell(new Label(2, 3, "Febrero", cellFormat));
            sheet.addCell(new Label(3, 3, "Marzo", cellFormat));
            sheet.addCell(new Label(4, 3, "Abril", cellFormat));
            sheet.addCell(new Label(5, 3, "Mayo", cellFormat));
            sheet.addCell(new Label(6, 3, "Junio", cellFormat));
            sheet.addCell(new Label(7, 3, "Julio", cellFormat));
            sheet.addCell(new Label(8, 3, "Agosto", cellFormat));
            sheet.addCell(new Label(9, 3, "Setiembre", cellFormat));
            sheet.addCell(new Label(10, 3, "Octubre", cellFormat));
            sheet.addCell(new Label(11, 3, "Noviembre", cellFormat));
            sheet.addCell(new Label(12, 3, "Diciembre", cellFormat));
            sheet.addCell(new Label(13, 3, "Totales", cellFormat));

            sheet.addCell(new Label(0, 9, "Conceptos", cellFormat));
            sheet.addCell(new Label(1, 9, "Enero", cellFormat));
            sheet.addCell(new Label(2, 9, "Febrero", cellFormat));
            sheet.addCell(new Label(3, 9, "Marzo", cellFormat));
            sheet.addCell(new Label(4, 9, "Abril", cellFormat));
            sheet.addCell(new Label(5, 9, "Mayo", cellFormat));
            sheet.addCell(new Label(6, 9, "Junio", cellFormat));
            sheet.addCell(new Label(7, 9, "Julio", cellFormat));
            sheet.addCell(new Label(8, 9, "Agosto", cellFormat));
            sheet.addCell(new Label(9, 9, "Setiembre", cellFormat));
            sheet.addCell(new Label(10, 9, "Octubre", cellFormat));
            sheet.addCell(new Label(11, 9, "Noviembre", cellFormat));
            sheet.addCell(new Label(12, 9, "Diciembre", cellFormat));
            sheet.addCell(new Label(13, 9, "Totales", cellFormat));

            CellView cellView = new CellView();
            cellView.setAutosize(true);
            sheet.setColumnView(0, cellView);
            sheet.setColumnView(1, cellView);
            sheet.setColumnView(2, cellView);
            sheet.setColumnView(3, cellView);
            sheet.setColumnView(4, cellView);
            sheet.setColumnView(5, cellView);
            sheet.setColumnView(6, cellView);
            sheet.setColumnView(7, cellView);
            sheet.setColumnView(8, cellView);
            sheet.setColumnView(9, cellView);
            sheet.setColumnView(10, cellView);
            sheet.setColumnView(11, cellView);
            sheet.setColumnView(12, cellView);
            sheet.setColumnView(13, cellView);
            cellFormat = new WritableCellFormat(font);
            cellFormat.setAlignment(Alignment.RIGHT);
            escribirDetalleResumen(periodo, sheet);
            jProgressBar1.setValue(13);
        } catch (WriteException ex) {
            Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void escribirDetalleResumen(int periodo, WritableSheet sheet) throws WriteException {

        String filaConceptoMes[];
        String filaTotalClasificacionMes[];
        String filaTotalGeneral[] = llenarArray();
        double totalClasificacionAnual = 0;
        double totalConceptosAnual = 0;
        double totalGeneralAnual = 0;

        int filaUltimaClasificacion = 10;
        int contadorFila = 0;
        int fila = 10;

        WritableFont font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
        WritableCellFormat cellFormatConceptos = new WritableCellFormat(font);
        cellFormatConceptos.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);

        font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.BOLD);
        WritableCellFormat cellFormatClasificacion = new WritableCellFormat(font);
        cellFormatClasificacion.setBackground(Colour.YELLOW);
        cellFormatClasificacion.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);

        font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.BOLD);
        font.setColour(Colour.WHITE);

        WritableCellFormat cellFormatTotales = new WritableCellFormat(font);
        cellFormatTotales.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
        cellFormatTotales.setBackground(Colour.BLUE);

        font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
        WritableCellFormat cellFormatImportesConceptos = new WritableCellFormat(font);
        cellFormatImportesConceptos.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
        cellFormatImportesConceptos.setAlignment(Alignment.RIGHT);

        WritableCellFormat cellFormatImportesClasificacion = new WritableCellFormat(font);
        cellFormatImportesClasificacion.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
        cellFormatImportesClasificacion.setAlignment(Alignment.RIGHT);
        cellFormatImportesClasificacion.setBackground(Colour.YELLOW);

        font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
        font.setColour(Colour.WHITE);
        WritableCellFormat cellFormatImporteTotales = new WritableCellFormat(font);
        cellFormatImporteTotales.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
        cellFormatImporteTotales.setAlignment(Alignment.RIGHT);
        cellFormatImporteTotales.setBackground(Colour.BLUE);
        if (chkAgrupar.isSelected()) {//Detalle de resultados agrupados por clasificación
            ResultSet resultClasificacion = control.DevolverRegistro(String.format("SELECT c.`idClasificacionGastos`,c.`nombre`,FORMAT(SUM(g.`importe`),2) AS importe,IF(c.`idClasificacionGastos`=1, 1, 0) AS orden "
                    + "FROM clasificaciongastos c, conceptogastos co, gastos g "
                    + "WHERE c.`idClasificacionGastos`=co.`idClasificacionGastos` "
                    + "AND co.`idConceptoGastos`=g.`idConceptoGastos` AND g.`anio`=%d "
                    + "GROUP BY c.`idClasificacionGastos` "
                    + "ORDER BY orden, c.`nombre`;", periodo));
            try {
                while (resultClasificacion.next()) {
                    totalClasificacionAnual = 0;
                    filaTotalClasificacionMes = llenarArray();
                    sheet.addCell(new Label(0, fila, resultClasificacion.getString(2), cellFormatClasificacion));
                    contadorFila++;
                    fila++;
//                ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `idConceptoGastos`, `nombre` FROM `conceptogastos` WHERE `idClasificacionGastos`=%s ORDER BY `nombre`;", resultClasificacion.getString(1)));

                    ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT c.`idConceptoGastos`, c.`nombre` FROM conceptogastos c, gastos g WHERE c.`idConceptoGastos`=g.`idConceptoGastos` AND c.`idClasificacionGastos`=%s ORDER BY c.`nombre`;", resultClasificacion.getString(1)));
                    while (resultConcepto.next()) {
                        totalConceptosAnual = 0;
                        ResultSet resultGastos = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `mes`, SUM(`importe`) AS importe FROM `gastos` WHERE `idConceptoGastos` =%s AND `anio` =%s GROUP BY `mes`;", resultConcepto.getString(1), periodo));
                        filaConceptoMes = llenarArray();
                        filaConceptoMes[1] = resultConcepto.getString(2);
                        while (resultGastos.next()) {

                            filaConceptoMes[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(resultGastos.getDouble(2));
                            filaTotalClasificacionMes[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(getValue(filaTotalClasificacionMes, resultGastos.getInt(1) + 2) + resultGastos.getDouble(2));
                            filaTotalGeneral[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(getValue(filaTotalGeneral, resultGastos.getInt(1) + 2) + resultGastos.getDouble(2));

                            totalConceptosAnual += resultGastos.getDouble(2);
                            totalClasificacionAnual += resultGastos.getDouble(2);
                            totalGeneralAnual += resultGastos.getDouble(2);

                        }
                        filaConceptoMes[14] = FrmRegistrarGastos.control.decimalFormat(totalConceptosAnual);
                        for (int i = 1; i < filaConceptoMes.length; i++) {
                            sheet.addCell(new Label(i - 1, fila, filaConceptoMes[i], i == 1 ? cellFormatConceptos : cellFormatImportesConceptos));

                        }
                        fila++;
                        contadorFila++;

                    }
                    filaTotalClasificacionMes[1] = sheet.getCell(0, filaUltimaClasificacion).getContents();
                    filaTotalClasificacionMes[14] = FrmRegistrarGastos.control.decimalFormat(totalClasificacionAnual);
                    for (int i = 1; i < filaTotalClasificacionMes.length; i++) {
                        sheet.addCell(new Label(i - 1, filaUltimaClasificacion, filaTotalClasificacionMes[i], i == 1 ? cellFormatClasificacion : cellFormatImportesClasificacion));

                    }
                    filaUltimaClasificacion = fila;
                }
                filaTotalGeneral[0] = "total";
                filaTotalGeneral[1] = "TOTAL:";
                filaTotalGeneral[14] = FrmRegistrarGastos.control.decimalFormat(totalGeneralAnual);
                for (int i = 1; i < filaTotalGeneral.length; i++) {
                    sheet.addCell(new Label(i - 1, fila, filaTotalGeneral[i], i == 1 ? cellFormatTotales : cellFormatImporteTotales));

                }
                cargarResumenGeneral(periodo, sheet, filaTotalGeneral);
            } catch (SQLException ex) {
                Logger.getLogger(PanelResumenGastos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (WriteException ex) {
                Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {//Se muestra solo los conceptos sin tener en cuenta la clasificación

            try {

//                ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `idConceptoGastos`, `nombre` FROM `conceptogastos` WHERE `idClasificacionGastos`=%s ORDER BY `nombre`;", resultClasificacion.getString(1)));
                ResultSet resultConcepto = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT c.`idConceptoGastos`, c.`nombre` FROM conceptogastos c, gastos g WHERE c.`idConceptoGastos`=g.`idConceptoGastos` ORDER BY c.`nombre`;"));
                while (resultConcepto.next()) {
                    totalConceptosAnual = 0;
                    ResultSet resultGastos = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT `mes`, SUM(`importe`) AS importe FROM `gastos` WHERE `idConceptoGastos` =%s AND `anio` =%s GROUP BY `mes`;", resultConcepto.getString(1), periodo));
                    filaConceptoMes = llenarArray();
                    filaConceptoMes[1] = resultConcepto.getString(2);
                    while (resultGastos.next()) {

                        filaConceptoMes[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(resultGastos.getDouble(2));
                        filaTotalGeneral[resultGastos.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(getValue(filaTotalGeneral, resultGastos.getInt(1) + 2) + resultGastos.getDouble(2));

                        totalConceptosAnual += resultGastos.getDouble(2);
                        totalClasificacionAnual += resultGastos.getDouble(2);
                        totalGeneralAnual += resultGastos.getDouble(2);

                    }
                    filaConceptoMes[14] = FrmRegistrarGastos.control.decimalFormat(totalConceptosAnual);
                    for (int i = 1; i < filaConceptoMes.length; i++) {
                        sheet.addCell(new Label(i - 1, fila, filaConceptoMes[i], i == 1 ? cellFormatConceptos : cellFormatImportesConceptos));

                    }
                    fila++;
                    contadorFila++;

                }

                filaTotalGeneral[0] = "total";
                filaTotalGeneral[1] = "TOTAL:";
                filaTotalGeneral[14] = FrmRegistrarGastos.control.decimalFormat(totalGeneralAnual);
                for (int i = 1; i < filaTotalGeneral.length; i++) {
                    sheet.addCell(new Label(i - 1, fila, filaTotalGeneral[i], i == 1 ? cellFormatTotales : cellFormatImporteTotales));

                }
                cargarResumenGeneral(periodo, sheet, filaTotalGeneral);
            } catch (SQLException ex) {
                Logger.getLogger(PanelResumenGastos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (WriteException ex) {
                Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private String[] cargarResumenGeneral(int periodo, WritableSheet sheet, String egresos[]) {
        String[] row = llenarArray();
        try {
            WritableFont font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
            font.setColour(Colour.LIME);
            WritableCellFormat cellFormatIngresos = new WritableCellFormat(font);
            cellFormatIngresos.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);

            WritableCellFormat cellFormatImporteIngresos = new WritableCellFormat(font);
            cellFormatImporteIngresos.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            cellFormatImporteIngresos.setAlignment(Alignment.RIGHT);

            font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
            font.setColour(Colour.RED);
            WritableCellFormat cellFormatEgresos = new WritableCellFormat(font);
            cellFormatEgresos.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);

            WritableCellFormat cellFormatImporteEgresos = new WritableCellFormat(font);
            cellFormatImporteEgresos.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            cellFormatImporteEgresos.setAlignment(Alignment.RIGHT);

            font = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD);
            font.setColour(Colour.BLUE);
            WritableCellFormat cellFormatNeto = new WritableCellFormat(font);
            cellFormatNeto.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);

            WritableCellFormat cellFormatImporteNeto = new WritableCellFormat(font);
            cellFormatImporteNeto.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            cellFormatImporteNeto.setAlignment(Alignment.RIGHT);

            ResultSet result = FrmRegistrarGastos.control.DevolverRegistro(String.format("SELECT  `mes` ,`totalIngresos` FROM `periodoanalisisgastos` WHERE `anio`=%d ORDER BY `mes`;", periodo));

            row[0] = "ingresos";
            row[1] = "Total de Ingresos";
            double totalIngresos = 0;
            double totalEgresos = 0;
            double totalNeto = 0;
            sheet.addCell(new Label(0, 4, "Total de Ingresos", cellFormatIngresos));
            sheet.addCell(new Label(0, 5, "Total de Egresos", cellFormatEgresos));
            sheet.addCell(new Label(0, 6, "Neto", cellFormatNeto));
            try {
                while (result.next()) {
                    row[result.getInt(1) + 2] = FrmRegistrarGastos.control.decimalFormat(result.getDouble(2));
                    totalIngresos += result.getDouble(2);
                    totalEgresos += Double.parseDouble(egresos[result.getInt(1) + 2].replace(",", ""));
                    sheet.addCell(new Label(result.getInt(1) + 1, 4, result.getString(2), cellFormatImporteIngresos));
                    sheet.addCell(new Label(result.getInt(1) + 1, 5, egresos[result.getInt(1) + 2], cellFormatImporteEgresos));
                    sheet.addCell(new Label(result.getInt(1) + 1, 6, FrmRegistrarGastos.control.decimalFormat(result.getDouble(2) - Double.parseDouble(egresos[result.getInt(1) + 2].replace(",", ""))), cellFormatImporteNeto));
                    totalNeto += result.getDouble(2) - Double.parseDouble(egresos[result.getInt(1) + 2].replace(",", ""));
                }
            } catch (SQLException ex) {
                Logger.getLogger(PanelResumenGastos.class.getName()).log(Level.SEVERE, null, ex);
            }
            sheet.addCell(new Label(13, 4, FrmRegistrarGastos.control.decimalFormat(totalIngresos), cellFormatImporteIngresos));
            sheet.addCell(new Label(13, 5, FrmRegistrarGastos.control.decimalFormat(totalEgresos), cellFormatImporteEgresos));
            sheet.addCell(new Label(13, 6, FrmRegistrarGastos.control.decimalFormat(totalNeto), cellFormatImporteNeto));

        } catch (WriteException ex) {
            Logger.getLogger(FrmRegistrarGastos.class.getName()).log(Level.SEVERE, null, ex);
        }
        return row;

    }

    /**
     * Obtiene el valor en la posición index del array
     *
     * @param array arreglo en el que se va a buscar
     * @param index indice a obtener
     * @return 0 si es nulo, el valor en la posicion determinada por index
     */
    private double getValue(String[] array, int index) {
        try {
            return Double.parseDouble(array[index].replace(",", ""));
        } catch (Exception e) {
        }
        return 0;
    }

    private String[] llenarArray() {
        String a[] = new String[15];
        for (int i = 0; i < a.length; i++) {
            a[i] = "0.00";
        }
        return a;
    }

    public static void llenarCombo() {
        comboClasificacionListo = false;
        control.fillComboBox("SELECT `idClasificacionGastos`, `nombre`,IF(`idClasificacionGastos`=1, 0, 1) AS orden "
                + "FROM `clasificaciongastos` ORDER BY orden, `nombre`;", cboClasificacion, mapClasificacion);
        comboClasificacionListo = true;

    }

    private void ocultarComponentes(boolean b) {
        lblClasificacion.setVisible(b);
        lblConcepto.setVisible(b);
        lblFecha.setVisible(b);
        lblDetalles.setVisible(b);
        lblImporte.setVisible(b);
        cboClasificacion.setVisible(b);
        cboConceptos.setVisible(b);
        jDateChooserFecha.setVisible(b);
        txtDetalles.setVisible(b);
        txtImporte.setVisible(b);
        chkAgrupar.setVisible(!b);
    }

    private void actualizarTotalEgresos() {
        String totalEgresos = control.DevolverRegistroDto(String.format("SELECT IFNULL(SUM(`importe`),0.00) FROM `gastos` WHERE `anio`=%d AND `mes`=%d;", periodo, jTabbedPane.getSelectedIndex()), 1);
        control.ejecutar(String.format("UPDATE periodoanalisisgastos p SET p.`totalEgresos`=%s, p.`neto`= p.`totalIngresos`-(%s+ p.`totalOtrosEgresos`) WHERE p.`anio`=%d AND p.`mes`=%d;", totalEgresos, totalEgresos, periodo, jTabbedPane.getSelectedIndex()));
        try {
            FrmGestionPeriodoGastos.mostrarTotalesResumen();
        } catch (Exception e) {
        }
    }

    private void cargarGastos() {
        if (comboAnioListo) {
            if (jTabbedPane.getSelectedIndex() != 12) {
                for (int i = 0; i < jTabbedPane.getTabCount() - 1; i++) {
                    //Reasignamos un label
                    jTabbedPane.setComponentAt(i, new JLabel());

                }
                btnAdd.setEnabled(true);
                //Cargamos un unico panel

                panelGastoMes.setPeriodo(periodo, jTabbedPane.getSelectedIndex());
                jTabbedPane.setComponentAt(jTabbedPane.getSelectedIndex(), panelGastoMes);
                habilitarBotones(false);
                System.out.println(periodo + " ---> " + jTabbedPane.getSelectedIndex());
                Calendar calendar = new GregorianCalendar();
                calendar.set(periodo, jTabbedPane.getSelectedIndex(), 1);
                jDateChooserFecha.setMinSelectableDate(calendar.getTime());
                calendar.set(periodo, jTabbedPane.getSelectedIndex() + 1, 1);

                calendar.add(Calendar.DATE, -1);
                jDateChooserFecha.setMaxSelectableDate(calendar.getTime());
                ocultarComponentes(true);
            } else {
                panelResumenGastos.load(periodo, chkAgrupar.isSelected());

                btnAdd.setEnabled(false);
                ocultarComponentes(false);
            }
        }
    }

}
